{"version":3,"file":"static/js/439.969055b0.chunk.js","mappings":"8SAkBA,MAAMA,EAA0B,CAC9B,CAAEC,GAAI,OAAQC,MAAO,OAAQC,MAAO,QACpC,CAAEF,GAAI,QAASC,MAAO,QAASC,MAAO,QACtC,CAAEF,GAAI,WACN,CAAEA,GAAI,cAGFG,EAAc,CAAC,sBAAuB,4BAE7B,SAASC,IACtB,MAAM,aAAEC,IAAiBC,EAAAA,EAAAA,MAEnB,gBAAEC,IAAoBC,EAAAA,EAAAA,OAEtB,WAAEC,EAAF,YAAcC,IAAgBC,EAAAA,EAAAA,GAAQ,wBAErCC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAEnC,gBAAEC,IAAoBC,EAAAA,EAAAA,OACtB,uBAAEC,EAAF,oBAA0BC,EAA1B,UAA+CC,IAAcC,EAAAA,EAAAA,OAEnEC,EAAAA,EAAAA,YAAU,KACJN,EAAgBO,OAClBL,EAAuBF,EAAgBO,SAExC,CAACP,EAAgBO,MAAOL,KAE3BI,EAAAA,EAAAA,YAAU,KACR,GAAIH,EAAoBK,OAAS,EAAG,CAClC,MAAMC,EAAYN,EAAoBO,KAAKC,IAAD,CACxC1B,GAAI0B,EAAmB1B,GACvB2B,KAAMD,EAAmBC,KACzBC,MAAOF,EAAmBE,MAC1BC,gBAAiB,CACfC,YAAaJ,EAAmBI,YAChCC,OAAQL,EAAmBK,OAC3BC,UAAWN,EAAmBO,YAC9BC,cAAeR,EAAmBS,aAEpCC,WAAY,CACV,CACEpC,GAAIqC,EAAAA,GAAAA,cACJpC,MAAO,qBACPqC,GAAI,IAAMnB,EAAUkB,EAAAA,GAAAA,cAA4B,gBAAiB9B,SAIvEM,EAAYW,MAGb,CAACN,IAkDJ,OACE,SAAC,IAAD,CAAMqB,MAAM,qBAAZ,UACE,UAAC,IAAD,CAAWC,UAAUnC,GAAuB,KAA5C,WACE,SAAC,IAAD,CACEoC,QAAQ,MACRC,MAAO,CACL,CAAEf,KAAM,eAAgBgB,KAAMC,EAAAA,EAAAA,IAAAA,MAC9B,CAAEjB,KAAM,0BAGZ,SAAC,KAAD,CACEkB,SAAS,oBACTC,KAAM3C,EACNM,WAAYA,EACZsC,YA9DY,CAACC,EAA6CC,KAGhE,GAFAvC,EAAYsC,EAAOC,GAEP,wBAARA,EAA+B,CACjC,MAAMzB,EAAYN,EAAoBO,KAAKC,IAAD,CACxC1B,GAAI0B,EAAmB1B,GACvB2B,KAAMD,EAAmBC,KACzBC,MAAOF,EAAmBE,MAC1BC,gBAAiB,CACfC,YAAaJ,EAAmBI,YAChCC,OAAQL,EAAmBK,OAC3BC,UAAWN,EAAmBO,YAC9BC,cAAeR,EAAmBS,aAEpCC,WAAY,CACV,CACEpC,GAAIqC,EAAAA,GAAAA,cACJpC,MAAO,qBACPqC,GAAI,IAAMnB,EAAUkB,EAAAA,GAAAA,cAA4B,gBAAiB9B,SAIvEM,EAAYW,GAGd,GAAY,6BAARyB,EAAoC,CACtC,MAAMzB,EAAYN,EAAoBO,KAAKC,IAAD,CACxC1B,GAAI0B,EAAmB1B,GACvB2B,KAAM,YACNC,MAAO,aACPC,gBAAiB,CACfC,YAAa,aACbC,OAAQ,cACRC,UAAW,kBACXE,cAAe,wBAEjBE,WAAY,CACV,CACEpC,GAAIqC,EAAAA,GAAAA,YACJpC,MAAO,oBACPqC,GAAI,IAAMnB,EAAUkB,EAAAA,GAAAA,YAA0B,gBAAiB9B,SAIrEM,EAAYW,KAmBR0B,SAAUnD,EACVa,SAAUA","sources":["pages/OrganizationOther.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n// @mui\nimport { Container } from '@mui/material';\n// hooks\nimport useSettings from '../hooks/useSettings';\nimport useTabs from '../hooks/useTabs';\nimport { useUser, useDao } from '../hooks/universaldot';\n// routes\nimport { PATH_UNIVERSALDOT } from '../routes/paths';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\n// universaldot\nimport { DAOLists } from '../components/universaldot/DAO';\nimport { DaoCallables } from '../types';\nimport { useSnackbar } from 'notistack';\n// ----------------------------------------------------------------------\n\nconst TABLE_HEAD_JOIN_REC_ORG = [\n  { id: 'name', label: 'Name', align: 'left' },\n  { id: 'owner', label: 'Owner', align: 'left' },\n  { id: 'actions' },\n  { id: 'expandRow' },\n];\n\nconst TAB_OPTIONS = ['Joined Organization', 'Recommended Organization'];\n\nexport default function OrganizationOther() {\n  const { themeStretch } = useSettings();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { currentTab, onChangeTab } = useTabs('Joined Organization');\n\n  const [listData, setListData] = useState([]);\n\n  const { selectedKeyring } = useUser();\n  const { getJoinedOrganizations, joinedOrganizations, daoAction } = useDao();\n\n  useEffect(() => {\n    if (selectedKeyring.value) {\n      getJoinedOrganizations(selectedKeyring.value);\n    }\n  }, [selectedKeyring.value, getJoinedOrganizations]);\n\n  useEffect(() => {\n    if (joinedOrganizations.length > 0) {\n      const tableData = joinedOrganizations.map((joinedOrganization: any) => ({\n        id: joinedOrganization.id,\n        name: joinedOrganization.name,\n        owner: joinedOrganization.owner,\n        expandedContent: {\n          description: joinedOrganization.description,\n          vision: joinedOrganization.vision,\n          createdAt: joinedOrganization.createdTime,\n          lastUpdatedAt: joinedOrganization.lastUpdated,\n        },\n        daoActions: [\n          {\n            id: DaoCallables.UNSIGN_VISION,\n            label: 'Leave organization',\n            cb: () => daoAction(DaoCallables.UNSIGN_VISION, '@TODO payload', enqueueSnackbar),\n          },\n        ],\n      }));\n      setListData(tableData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [joinedOrganizations]);\n\n  const onTabSwitch = (event: React.SyntheticEvent<Element, Event>, tab: string) => {\n    onChangeTab(event, tab);\n\n    if (tab === 'Joined Organization') {\n      const tableData = joinedOrganizations.map((joinedOrganization: any) => ({\n        id: joinedOrganization.id,\n        name: joinedOrganization.name,\n        owner: joinedOrganization.owner,\n        expandedContent: {\n          description: joinedOrganization.description,\n          vision: joinedOrganization.vision,\n          createdAt: joinedOrganization.createdTime,\n          lastUpdatedAt: joinedOrganization.lastUpdated,\n        },\n        daoActions: [\n          {\n            id: DaoCallables.UNSIGN_VISION,\n            label: 'Leave organization',\n            cb: () => daoAction(DaoCallables.UNSIGN_VISION, '@TODO payload', enqueueSnackbar),\n          },\n        ],\n      }));\n      setListData(tableData);\n    }\n\n    if (tab === 'Recommended Organization') {\n      const tableData = joinedOrganizations.map((joinedOrganization: any) => ({\n        id: joinedOrganization.id,\n        name: 'Mock name',\n        owner: 'Mock owner',\n        expandedContent: {\n          description: 'Mock desc.',\n          vision: 'Mock vision',\n          createdAt: 'Mock created at',\n          lastUpdatedAt: 'Mock last updated at',\n        },\n        daoActions: [\n          {\n            id: DaoCallables.SIGN_VISION,\n            label: 'Join organization',\n            cb: () => daoAction(DaoCallables.SIGN_VISION, '@TODO payload', enqueueSnackbar),\n          },\n        ],\n      }));\n      setListData(tableData);\n    }\n  };\n\n  return (\n    <Page title=\"Other organization\">\n      <Container maxWidth={themeStretch ? false : 'xl'}>\n        <HeaderBreadcrumbs\n          heading=\"DAO\"\n          links={[\n            { name: 'Organization', href: PATH_UNIVERSALDOT.dao.root },\n            { name: 'Other organization' },\n          ]}\n        />\n        <DAOLists\n          listType=\"otherOrganization\"\n          tabs={TAB_OPTIONS}\n          currentTab={currentTab}\n          onTabSwitch={onTabSwitch}\n          listHead={TABLE_HEAD_JOIN_REC_ORG}\n          listData={listData}\n        />\n      </Container>\n    </Page>\n  );\n}\n"],"names":["TABLE_HEAD_JOIN_REC_ORG","id","label","align","TAB_OPTIONS","OrganizationOther","themeStretch","useSettings","enqueueSnackbar","useSnackbar","currentTab","onChangeTab","useTabs","listData","setListData","useState","selectedKeyring","useUser","getJoinedOrganizations","joinedOrganizations","daoAction","useDao","useEffect","value","length","tableData","map","joinedOrganization","name","owner","expandedContent","description","vision","createdAt","createdTime","lastUpdatedAt","lastUpdated","daoActions","DaoCallables","cb","title","maxWidth","heading","links","href","PATH_UNIVERSALDOT","listType","tabs","onTabSwitch","event","tab","listHead"],"sourceRoot":""}