{"version":3,"file":"static/js/994.f0123c74.chunk.js","mappings":"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","sources":["components/Page.tsx","components/universaldot/Organizations.tsx","pages/OrganizationOwn.tsx"],"sourcesContent":["import { Helmet } from 'react-helmet-async';\nimport { forwardRef, ReactNode } from 'react';\n// @mui\nimport { Box, BoxProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\ninterface Props extends BoxProps {\n  children: ReactNode;\n  meta?: ReactNode;\n  title: string;\n}\n\nconst Page = forwardRef<HTMLDivElement, Props>(({ children, title = '', meta, ...other }, ref) => (\n  <>\n    <Helmet>\n      <title>{`${title} | UniversalDot.`}</title>\n      {meta}\n    </Helmet>\n\n    <Box ref={ref} {...other}>\n      {children}\n    </Box>\n  </>\n));\n\nexport default Page;\n","/* eslint-disable multiline-ternary */\nimport { useEffect, useState, useCallback, SetStateAction } from 'react';\nimport { useUser, useDao, useStatus } from '../../hooks/universaldot';\nimport { daoCallables, statusTypes } from '../../types';\n\nconst Organizations = ({ type }: any) => {\n  const [open, setOpen] = useState(false);\n  const [actionType, setActionType] = useState('');\n  const [showLoader, setShowLoader] = useState(false);\n\n  const [modalTitle, setModalTitle] = useState('');\n  const [daoType, setDaoType] = useState('');\n  const [isActionButtonDisabled, setIsActionButtonDisabled] = useState(false);\n\n  const { status, setStatus } = useStatus();\n\n  const { selectedKeyring } = useUser();\n  const {\n    getJoinedOrganizations,\n    getTotalOrganizations,\n    getTotalVisions,\n    getSuggestedVisions,\n    totalOrganizations,\n    totalVisions,\n    joinedOrganizations,\n    suggestedVisions,\n    actionLoading,\n    daoAction,\n    setVisionName,\n    visionNameForAction,\n    organizationNameForAction,\n    memberOrTaskForAction,\n    setOrganizationName,\n    setMemberOrTask,\n    getApplicants,\n    allApplicants,\n    resetFields,\n  } = useDao();\n\n  const [searchOrg, setSearchOrg] = useState('');\n\n  const visionNameTypes = [\n    daoCallables.SIGN_VISION,\n    daoCallables.UNSIGN_VISION,\n    daoCallables.CREATE_VISION,\n    daoCallables.REMOVE_VISION,\n  ];\n  const orgNameTypes = [\n    daoCallables.CREATE_ORGANIZATION,\n    daoCallables.DISSOLVE_ORGANIZATION,\n    daoCallables.ADD_MEMBERS,\n    daoCallables.REMOVE_MEMBERS,\n    daoCallables.ADD_TASKS,\n    daoCallables.REMOVE_TASKS,\n  ];\n  const memberAndTaskTypes = [\n    daoCallables.ADD_MEMBERS,\n    daoCallables.REMOVE_MEMBERS,\n    daoCallables.ADD_TASKS,\n    daoCallables.REMOVE_TASKS,\n  ];\n  const taskTypes = [daoCallables.ADD_TASKS, daoCallables.REMOVE_TASKS];\n\n  useEffect(() => {\n    if (actionType) {\n      let title = '';\n      let daoType = '';\n      let isButtonDisabled = false;\n      switch (actionType) {\n        case 'joined_sign':\n          title = 'Sign vision';\n          daoType = daoCallables.SIGN_VISION;\n\n          if (!visionNameForAction) {\n            isButtonDisabled = true;\n          }\n\n          break;\n        case 'joined_unsign':\n          title = 'Unsign vision';\n          daoType = daoCallables.UNSIGN_VISION;\n\n          if (!visionNameForAction) {\n            isButtonDisabled = true;\n          }\n\n          break;\n        case 'own_createVision':\n          title = 'Create vision';\n          daoType = daoCallables.CREATE_VISION;\n\n          if (!visionNameForAction) {\n            isButtonDisabled = true;\n          }\n\n          break;\n        case 'own_createOrganization':\n          title = 'Create organization';\n          daoType = daoCallables.CREATE_ORGANIZATION;\n\n          if (!organizationNameForAction) {\n            isButtonDisabled = true;\n          }\n\n          break;\n        case 'own_addMember':\n          title = 'Add member';\n          daoType = daoCallables.ADD_MEMBERS;\n\n          if (!organizationNameForAction || !memberOrTaskForAction) {\n            isButtonDisabled = true;\n          }\n\n          break;\n        case 'own_addTask':\n          title = 'Add task';\n          daoType = daoCallables.ADD_TASKS;\n\n          if (!organizationNameForAction || !memberOrTaskForAction) {\n            isButtonDisabled = true;\n          }\n\n          break;\n        case 'own_removeVision':\n          title = 'Remove vision';\n          daoType = daoCallables.REMOVE_VISION;\n\n          if (!visionNameForAction) {\n            isButtonDisabled = true;\n          }\n\n          break;\n        case 'own_dissolveOrganization':\n          title = 'Dissolve organization';\n          daoType = daoCallables.DISSOLVE_ORGANIZATION;\n\n          if (!organizationNameForAction) {\n            isButtonDisabled = true;\n          }\n\n          break;\n        case 'own_removeMembers':\n          title = 'Remove members';\n          daoType = daoCallables.REMOVE_MEMBERS;\n\n          if (!organizationNameForAction || !memberOrTaskForAction) {\n            isButtonDisabled = true;\n          }\n\n          break;\n        case 'own_removeTask':\n          title = 'Remove task';\n          daoType = daoCallables.REMOVE_TASKS;\n\n          if (!organizationNameForAction || !memberOrTaskForAction) {\n            isButtonDisabled = true;\n          }\n\n          break;\n        default:\n      }\n      setModalTitle(title);\n      setDaoType(daoType);\n      setIsActionButtonDisabled(isButtonDisabled);\n    }\n  }, [actionType, memberOrTaskForAction, visionNameForAction, organizationNameForAction]);\n\n  useEffect(() => {\n    if (selectedKeyring.value) {\n      getJoinedOrganizations(selectedKeyring.value, daoCallables.MEMBER_OF);\n      getTotalOrganizations(daoCallables.ORGANIZATION_COUNT);\n      getTotalVisions(daoCallables.VISION_COUNT);\n      getSuggestedVisions(selectedKeyring.value, daoCallables.VISION);\n    }\n  }, [\n    selectedKeyring.value,\n    getJoinedOrganizations,\n    getTotalOrganizations,\n    getTotalVisions,\n    getSuggestedVisions,\n  ]);\n\n  const handleClose = useCallback(() => setOpen(false), []);\n\n  const handleTopInputOnChange = useCallback(\n    (inputType, value) => {\n      switch (inputType) {\n        case daoCallables.SIGN_VISION:\n        case daoCallables.UNSIGN_VISION:\n        case daoCallables.CREATE_VISION:\n        case daoCallables.REMOVE_VISION:\n          setVisionName(value);\n          break;\n        case daoCallables.CREATE_ORGANIZATION:\n        case daoCallables.DISSOLVE_ORGANIZATION:\n        case daoCallables.ADD_MEMBERS:\n        case daoCallables.ADD_TASKS:\n        case daoCallables.REMOVE_MEMBERS:\n        case daoCallables.REMOVE_TASKS:\n          setOrganizationName(value);\n          break;\n        case 'memberOrTask':\n          setMemberOrTask(value);\n          break;\n        default:\n      }\n    },\n    [setMemberOrTask, setVisionName, setOrganizationName]\n  );\n\n  const handleBottomInputOnChange = useCallback(\n    (inputType, value) => {\n      switch (inputType) {\n        case daoCallables.CREATE_ORGANIZATION:\n        case daoCallables.DISSOLVE_ORGANIZATION:\n        case daoCallables.ADD_MEMBERS:\n        case daoCallables.ADD_TASKS:\n        case daoCallables.REMOVE_MEMBERS:\n        case daoCallables.REMOVE_TASKS:\n          setMemberOrTask(value);\n          break;\n        default:\n      }\n    },\n    [setMemberOrTask]\n  );\n\n  const buttonClick = useCallback(\n    (actionType) => {\n      setActionType(actionType);\n      resetFields();\n      setOpen(true);\n    },\n    [resetFields]\n  );\n\n  useEffect(() => {\n    if (!!status && status === statusTypes.INIT) {\n      setShowLoader(true);\n    }\n\n    if (!!status && status === statusTypes.IN_BLOCK) {\n      setShowLoader(false);\n      handleClose();\n      setTimeout(() => {\n        setStatus('');\n      }, 5000);\n    }\n  }, [status, setStatus, handleClose]);\n\n  const searchOrganization = () => {\n    getApplicants(searchOrg);\n  };\n\n  const handleOnSearchOrg = (val: any) => {\n    setSearchOrg(val);\n  };\n\n  return (\n    <div>\n      {type === 'joined' && (\n        <>\n          <div>Total orgs: {totalOrganizations}</div>\n          <div>Total visions: {totalVisions}</div>\n          <div>Joined orgs:</div>\n          <div>\n            {joinedOrganizations.map((org: any) => (\n              <div key={org}>\n                <div>title: {org?.title || 'Project: UniversalDot'}</div>\n                <div>desc: {org?.description || 'xasCaWH151cx2145Cxwkqp2345pWpqz'}</div>\n              </div>\n            ))}\n          </div>\n          <div>Suggested visions:</div>\n          <div>\n            {suggestedVisions.map((suggVis: any) => (\n              <div key={suggVis}>\n                <div>title: {suggVis?.title || 'Project: UniversalDot'}</div>\n                <div>desc: {suggVis?.description || 'xasCaWH151cx2145Cxwkqp2345pWpqz'}</div>\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n      <div>\n        todo: when refactoring new DAO look at old project for ideas.. this is irrelevant now from\n        porting\n      </div>\n    </div>\n  );\n};\n\nOrganizations.displayName = 'Organizations';\n\nexport default Organizations;\n","// @mui\nimport { Container, Typography } from '@mui/material';\n// hooks\nimport useSettings from '../hooks/useSettings';\n// components\nimport Page from '../components/Page';\n// universaldot\nimport Organizations from 'src/components/universaldot/Organizations';\n// ----------------------------------------------------------------------\n\nexport default function OrganizationOwn() {\n  const { themeStretch } = useSettings();\n\n  return (\n    <Page title=\"My organization\">\n      <Container maxWidth={themeStretch ? false : 'xl'}>\n        <Typography variant=\"h3\" component=\"h1\" paragraph>\n          My organization\n        </Typography>\n        <Organizations type=\"own\" />\n      </Container>\n    </Page>\n  );\n}\n"],"names":["forwardRef","ref","children","title","meta","other","Organizations","type","open","setOpen","useState","actionType","setActionType","showLoader","setShowLoader","modalTitle","setModalTitle","daoType","setDaoType","isActionButtonDisabled","setIsActionButtonDisabled","status","setStatus","useStatus","selectedKeyring","useUser","getJoinedOrganizations","getTotalOrganizations","getTotalVisions","getSuggestedVisions","totalOrganizations","totalVisions","joinedOrganizations","suggestedVisions","actionLoading","daoAction","setVisionName","visionNameForAction","organizationNameForAction","memberOrTaskForAction","setOrganizationName","setMemberOrTask","getApplicants","allApplicants","resetFields","useDao","searchOrg","setSearchOrg","daoCallables","useEffect","isButtonDisabled","value","handleClose","useCallback","inputType","statusTypes","setTimeout","map","org","description","suggVis","displayName","OrganizationOwn","themeStretch","useSettings","maxWidth","variant","component","paragraph"],"sourceRoot":""}