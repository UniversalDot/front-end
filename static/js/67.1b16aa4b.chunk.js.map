{"version":3,"file":"static/js/67.1b16aa4b.chunk.js","mappings":"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","sources":["components/Label.tsx","hooks/useTable.ts","components/EmptyContent.tsx","components/table/TableNoData.tsx","components/table/TableEmptyRows.tsx","components/table/TableHeadCustom.tsx","components/table/TableSelectedActions.tsx","components/universaldot/DAO/TableMoreMenu.tsx","components/universaldot/DAO/ExpandedRowContent.tsx","components/universaldot/DAO/TableRowExpandable.tsx","components/universaldot/DAO/TableRowGeneric.tsx","components/universaldot/DAO/TableToolbar.tsx","components/universaldot/DAO/DAOLists.tsx","components/universaldot/DAO/AnalyticsWidget.tsx","components/universaldot/DAO/Select.tsx","components/universaldot/Kanban/KanbanTaskAttachments.tsx","components/universaldot/Kanban/KanbanTaskDetails.tsx","components/universaldot/DAO/CreateTaskForm.tsx","components/universaldot/DAO/AddTaskToOrganizationForm.tsx","components/universaldot/DAO/RejectTaskForm.tsx","components/universaldot/DAO/OrganizationCreateAndUpdateForm.tsx","components/universaldot/DAO/OrganizationTransferOwnershipForm.tsx"],"sourcesContent":["// @mui\nimport { alpha, Theme, useTheme, styled } from '@mui/material/styles';\nimport { BoxProps, Box } from '@mui/material';\n// theme\nimport { ColorSchema } from '../theme/palette';\n\n// ----------------------------------------------------------------------\n\ntype LabelColor = 'default' | 'primary' | 'secondary' | 'info' | 'success' | 'warning' | 'error';\n\ntype LabelVariant = 'filled' | 'outlined' | 'ghost';\n\nconst RootStyle = styled('span')(\n  ({\n    theme,\n    ownerState,\n  }: {\n    theme: Theme;\n    ownerState: {\n      color: LabelColor;\n      variant: LabelVariant;\n    };\n  }) => {\n    const isLight = theme.palette.mode === 'light';\n    const { color, variant } = ownerState;\n\n    const styleFilled = (color: ColorSchema) => ({\n      color: theme.palette[color].contrastText,\n      backgroundColor: theme.palette[color].main,\n    });\n\n    const styleOutlined = (color: ColorSchema) => ({\n      color: theme.palette[color].main,\n      backgroundColor: 'transparent',\n      border: `1px solid ${theme.palette[color].main}`,\n    });\n\n    const styleGhost = (color: ColorSchema) => ({\n      color: theme.palette[color][isLight ? 'dark' : 'light'],\n      backgroundColor: alpha(theme.palette[color].main, 0.16),\n    });\n\n    return {\n      height: 22,\n      minWidth: 22,\n      lineHeight: 0,\n      borderRadius: 6,\n      cursor: 'default',\n      alignItems: 'center',\n      whiteSpace: 'nowrap',\n      display: 'inline-flex',\n      justifyContent: 'center',\n      padding: theme.spacing(0, 1),\n      color: theme.palette.grey[800],\n      fontSize: theme.typography.pxToRem(12),\n      fontFamily: theme.typography.fontFamily,\n      backgroundColor: theme.palette.grey[300],\n      fontWeight: theme.typography.fontWeightBold,\n\n      ...(color !== 'default'\n        ? {\n            ...(variant === 'filled' && { ...styleFilled(color) }),\n            ...(variant === 'outlined' && { ...styleOutlined(color) }),\n            ...(variant === 'ghost' && { ...styleGhost(color) }),\n          }\n        : {\n            ...(variant === 'outlined' && {\n              backgroundColor: 'transparent',\n              color: theme.palette.text.primary,\n              border: `1px solid ${theme.palette.grey[500_32]}`,\n            }),\n            ...(variant === 'ghost' && {\n              color: isLight ? theme.palette.text.secondary : theme.palette.common.white,\n              backgroundColor: theme.palette.grey[500_16],\n            }),\n          }),\n    };\n  }\n);\n\n// ----------------------------------------------------------------------\n\ninterface Props extends BoxProps {\n  startIcon?: React.ReactElement | null;\n  endIcon?: React.ReactElement | null;\n  color?: LabelColor;\n  variant?: LabelVariant;\n}\n\nexport default function Label({\n  children,\n  color = 'default',\n  variant = 'ghost',\n  startIcon,\n  endIcon,\n  sx,\n}: Props) {\n  const theme = useTheme();\n\n  const style = {\n    width: 16,\n    height: 16,\n    '& svg, img': { width: 1, height: 1, objectFit: 'cover' },\n  };\n\n  return (\n    <RootStyle\n      ownerState={{ color, variant }}\n      sx={{\n        ...(startIcon && { pl: 0.75 }),\n        ...(endIcon && { pr: 0.75 }),\n        ...sx,\n      }}\n      theme={theme}\n    >\n      {startIcon && <Box sx={{ mr: 0.75, ...style }}>{startIcon}</Box>}\n\n      {children}\n\n      {endIcon && <Box sx={{ ml: 0.75, ...style }}>{endIcon}</Box>}\n    </RootStyle>\n  );\n}\n","import { useState } from 'react';\n\n// ----------------------------------------------------------------------\n\nexport type UseTableProps = {\n  dense: boolean;\n  page: number;\n  setPage: React.Dispatch<React.SetStateAction<number>>;\n  rowsPerPage: number;\n  order: 'asc' | 'desc';\n  orderBy: string;\n  //\n  selected: string[];\n  setSelected: React.Dispatch<React.SetStateAction<string[]>>;\n  onSelectRow: (id: string) => void;\n  onSelectAllRows: (checked: boolean, newSelecteds: string[]) => void;\n  //\n  onSort: (id: string) => void;\n  onChangePage: (event: unknown, newPage: number) => void;\n  onChangeRowsPerPage: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onChangeDense: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport type Props = {\n  defaultDense?: boolean;\n  defaultOrder?: 'asc' | 'desc';\n  defaultOrderBy?: string;\n  defaultSelected?: string[];\n  defaultRowsPerPage?: number;\n  defaultCurrentPage?: number;\n};\n\nexport default function useTable(props?: Props) {\n  const [dense, setDense] = useState(props?.defaultDense || false);\n\n  const [orderBy, setOrderBy] = useState(props?.defaultOrderBy || 'name');\n\n  const [order, setOrder] = useState<'asc' | 'desc'>(props?.defaultOrder || 'asc');\n\n  const [page, setPage] = useState(props?.defaultCurrentPage || 0);\n\n  const [rowsPerPage, setRowsPerPage] = useState(props?.defaultRowsPerPage || 5);\n\n  const [selected, setSelected] = useState<string[]>(props?.defaultSelected || []);\n\n  const onSort = (id: string) => {\n    const isAsc = orderBy === id && order === 'asc';\n    if (id !== '') {\n      setOrder(isAsc ? 'desc' : 'asc');\n      setOrderBy(id);\n    }\n  };\n\n  const onSelectRow = (id: string) => {\n    const selectedIndex = selected.indexOf(id);\n\n    let newSelected: string[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    setSelected(newSelected);\n  };\n\n  const onSelectAllRows = (checked: boolean, newSelecteds: string[]) => {\n    if (checked) {\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const onChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const onChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const onChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setDense(event.target.checked);\n  };\n\n  return {\n    dense,\n    order,\n    page,\n    setPage,\n    orderBy,\n    rowsPerPage,\n    //\n    selected,\n    setSelected,\n    onSelectRow,\n    onSelectAllRows,\n    //\n    onSort,\n    onChangePage,\n    onChangeDense,\n    onChangeRowsPerPage,\n  };\n}\n\n// ----------------------------------------------------------------------\n\nexport function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nexport function getComparator<Key extends keyof any>(\n  order: 'asc' | 'desc',\n  orderBy: Key\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nexport function emptyRows(page: number, rowsPerPage: number, arrayLength: number) {\n  return page > 0 ? Math.max(0, (1 + page) * rowsPerPage - arrayLength) : 0;\n}\n","// @mui\nimport { styled } from '@mui/material/styles';\nimport { Typography, Box, BoxProps } from '@mui/material';\n//\nimport Image from './Image';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled(Box)(({ theme }) => ({\n  height: '100%',\n  display: 'flex',\n  textAlign: 'center',\n  alignItems: 'center',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  padding: theme.spacing(8, 2),\n}));\n\n// ----------------------------------------------------------------------\n\ninterface Props extends BoxProps {\n  title: string;\n  img?: string;\n  description?: string;\n}\n\nexport default function EmptyContent({ title, description, img, ...other }: Props) {\n  return (\n    <RootStyle {...other}>\n      <Image\n        disabledEffect\n        visibleByDefault\n        alt=\"empty content\"\n        src={img || '/assets/illustrations/illustration_empty_content.svg'}\n        sx={{ height: 240, mb: 3 }}\n      />\n\n      <Typography variant=\"h5\" gutterBottom>\n        {title}\n      </Typography>\n\n      {description && (\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n          {description}\n        </Typography>\n      )}\n    </RootStyle>\n  );\n}\n","// @mui\nimport { TableRow, TableCell } from '@mui/material';\n//\nimport EmptyContent from '../EmptyContent';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  isNotFound: boolean;\n};\n\nexport default function TableNoData({ isNotFound }: Props) {\n  return (\n    <TableRow>\n      {isNotFound ? (\n        <TableCell colSpan={12}>\n          <EmptyContent\n            title=\"No Data\"\n            sx={{\n              '& span.MuiBox-root': { height: 160 },\n            }}\n          />\n        </TableCell>\n      ) : (\n        <TableCell colSpan={12} sx={{ p: 0 }} />\n      )}\n    </TableRow>\n  );\n}\n","// @mui\nimport { TableRow, TableCell } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  height?: number;\n  emptyRows: number;\n};\n\nexport default function TableEmptyRows({ emptyRows, height }: Props) {\n  if (!emptyRows) {\n    return null;\n  }\n\n  return (\n    <TableRow\n      sx={{\n        ...(height && {\n          height: height * emptyRows,\n        }),\n      }}\n    >\n      <TableCell colSpan={9} />\n    </TableRow>\n  );\n}\n","// @mui\nimport { Theme } from '@mui/material/styles';\nimport {\n  Box,\n  SxProps,\n  Checkbox,\n  TableRow,\n  TableCell,\n  TableHead,\n  TableSortLabel,\n} from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nconst visuallyHidden = {\n  border: 0,\n  margin: -1,\n  padding: 0,\n  width: '1px',\n  height: '1px',\n  overflow: 'hidden',\n  position: 'absolute',\n  whiteSpace: 'nowrap',\n  clip: 'rect(0 0 0 0)',\n} as const;\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  order?: 'asc' | 'desc';\n  orderBy?: string;\n  headLabel: any[];\n  rowCount?: number;\n  numSelected?: number;\n  onSort?: (id: string) => void;\n  onSelectAllRows?: (checked: boolean) => void;\n  sx?: SxProps<Theme>;\n};\n\nexport default function TableHeadCustom({\n  order,\n  orderBy,\n  rowCount = 0,\n  headLabel,\n  numSelected = 0,\n  onSort,\n  onSelectAllRows,\n  sx,\n}: Props) {\n  return (\n    <TableHead sx={sx}>\n      <TableRow>\n        {onSelectAllRows && (\n          <TableCell padding=\"checkbox\">\n            <Checkbox\n              indeterminate={numSelected > 0 && numSelected < rowCount}\n              checked={rowCount > 0 && numSelected === rowCount}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                onSelectAllRows(event.target.checked)\n              }\n            />\n          </TableCell>\n        )}\n\n        {headLabel.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.align || 'left'}\n            sortDirection={orderBy === headCell.id ? order : false}\n            sx={{ width: headCell.width, minWidth: headCell.minWidth }}\n          >\n            {onSort ? (\n              <TableSortLabel\n                hideSortIcon\n                active={orderBy === headCell.id}\n                direction={orderBy === headCell.id ? order : 'asc'}\n                onClick={() => onSort(headCell.id)}\n                sx={{ textTransform: 'capitalize' }}\n              >\n                {headCell.label}\n\n                {orderBy === headCell.id ? (\n                  <Box sx={{ ...visuallyHidden }}>\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                  </Box>\n                ) : null}\n              </TableSortLabel>\n            ) : (\n              headCell.label\n            )}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n","// @mui\nimport { Checkbox, Typography, Stack, StackProps } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\ninterface Props extends StackProps {\n  dense?: boolean;\n  actions?: React.ReactNode;\n  rowCount: number;\n  numSelected: number;\n  onSelectAllRows: (checked: boolean) => void;\n}\n\nexport default function TableSelectedActions({\n  dense,\n  actions,\n  rowCount,\n  numSelected,\n  onSelectAllRows,\n  sx,\n  ...other\n}: Props) {\n  return (\n    <Stack\n      direction=\"row\"\n      alignItems=\"center\"\n      sx={{\n        px: 2,\n        top: 0,\n        left: 8,\n        right: 8,\n        zIndex: 9,\n        height: 58,\n        borderRadius: 1,\n        position: 'absolute',\n        bgcolor: 'primary.lighter',\n        ...(dense && {\n          pl: 1,\n          height: 38,\n        }),\n        ...sx,\n      }}\n      {...other}\n    >\n      <Checkbox\n        indeterminate={numSelected > 0 && numSelected < rowCount}\n        checked={rowCount > 0 && numSelected === rowCount}\n        onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n          onSelectAllRows(event.target.checked)\n        }\n      />\n\n      <Typography\n        variant=\"subtitle1\"\n        sx={{\n          ml: 2,\n          flexGrow: 1,\n          color: 'primary.main',\n          ...(dense && {\n            ml: 3,\n          }),\n        }}\n      >\n        {numSelected} selected\n      </Typography>\n\n      {actions && actions}\n    </Stack>\n  );\n}\n","// @mui\nimport { IconButton } from '@mui/material';\n//\nimport Iconify from '../../Iconify';\nimport MenuPopover from '../../MenuPopover';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  actions: React.ReactNode;\n  open?: HTMLElement | null;\n  onClose?: VoidFunction;\n  onOpen?: (event: React.MouseEvent<HTMLElement>) => void;\n};\n\nexport default function TableMoreMenu({ actions, open, onClose, onOpen }: Props) {\n  return (\n    <>\n      <IconButton onClick={onOpen}>\n        <Iconify icon={'eva:more-vertical-fill'} width={20} height={20} />\n      </IconButton>\n\n      <MenuPopover\n        open={Boolean(open)}\n        anchorEl={open}\n        onClose={onClose}\n        anchorOrigin={{ vertical: 'top', horizontal: 'left' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        arrow=\"right-top\"\n        sx={{\n          mt: -1,\n          // width: 160,\n          width: 'auto',\n          '& .MuiMenuItem-root': {\n            px: 1,\n            typography: 'body2',\n            borderRadius: 0.75,\n            '& svg': { mr: 2, width: 20, height: 20 },\n          },\n        }}\n      >\n        {actions}\n      </MenuPopover>\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\n// @mui\nimport { Box, Card, Button, Typography, Stack, DialogTitle } from '@mui/material';\nimport { DaoCallables } from '../../../types';\n//hooks\nimport { useDao } from '../../../hooks/universaldot';\n// components\nimport Iconify from '../../Iconify';\nimport { DialogAnimate } from '../../animate';\nimport { Select } from '.';\nimport { useSnackbar } from 'notistack';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  data: {\n    organizationId: string;\n    description: string;\n    vision: string;\n    createdAt: string;\n    lastUpdatedAt: string;\n    daoActions: {\n      id: DaoCallables;\n      label: string;\n      cb: () => void;\n    }[];\n  };\n};\n\nexport default function ExpandedRowContent({\n  data: { organizationId, description, vision, createdAt, lastUpdatedAt, daoActions },\n}: Props) {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [selectedDaoLabel, setSelectedDaoLabel] = useState<string>('');\n  const [selectedDaoId, setSelectedDaoId] = useState<DaoCallables | null>(null);\n\n  const { getApplicantsToOrganization, applicantsToOrganization } = useDao();\n\n  const [selectedOption, setSelectedOption] = useState('');\n  const [selectOptions, setSelectOptions] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (organizationId) {\n      getApplicantsToOrganization(\n        organizationId,\n        DaoCallables.APPLICANTS_TO_ORGANIZATION,\n        enqueueSnackbar\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [organizationId]);\n\n  useEffect(() => {\n    if (applicantsToOrganization?.length > 0) {\n      const mappedOptions = applicantsToOrganization.map(\n        (applicantToOrganization: any) => applicantToOrganization.name\n      );\n      setSelectOptions(mappedOptions);\n    }\n  }, [applicantsToOrganization]);\n\n  const onOptionSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedOption(event.target.value);\n\n    // const applicantName = applicantsToOrganization.find(\n    //   (applicant: any) => applicant.name === event.target.value\n    // ).id;\n  };\n\n  return (\n    <>\n      <Box pt=\"2rem\" pb=\"2rem\">\n        <Card sx={{ p: 3 }}>\n          {/* <Typography variant=\"overline\" sx={{ mb: 3, display: 'block', color: 'text.secondary' }}>\n          Your Plan\n        </Typography> */}\n          <Box display=\"flex\" maxWidth=\"80%\">\n            <Stack spacing={3} flex=\"1\">\n              <Box>\n                <Typography variant=\"h6\">Description</Typography>\n                <Typography>{description}</Typography>\n              </Box>\n              <Box>\n                <Typography variant=\"h6\">Vision</Typography>\n                <Typography>{vision}</Typography>\n              </Box>\n            </Stack>\n\n            <Stack spacing={3} flex=\"1\">\n              <Box>\n                <Typography variant=\"h6\">Created At</Typography>\n                <Typography>{createdAt}</Typography>\n              </Box>\n              <Box>\n                <Typography variant=\"h6\">Last Updated At</Typography>\n                <Typography>{lastUpdatedAt}</Typography>\n              </Box>\n            </Stack>\n          </Box>\n          <Box\n            sx={{\n              mt: { xs: 2, sm: 0 },\n              position: { sm: 'absolute' },\n              top: { sm: 24 },\n              right: { sm: 24 },\n            }}\n          >\n            {/* <Button size=\"small\" variant=\"outlined\" sx={{ mr: 1 }}>\n            Add Member\n          </Button>\n          <Button size=\"small\" variant=\"outlined\" sx={{ mr: 1 }}>\n            Add vision\n          </Button> */}\n            {daoActions?.map((daoAction, index) => (\n              <Button\n                key={daoAction.id}\n                variant=\"contained\"\n                startIcon={<Iconify icon={'eva:plus-fill'} />}\n                sx={{ mr: index < daoActions.length - 1 ? 1 : 0 }}\n                onClick={() => {\n                  setIsOpenModal(true);\n                  setSelectedDaoLabel(daoAction.label);\n                  setSelectedDaoId(daoAction.id);\n                }}\n              >\n                {daoAction.label}\n              </Button>\n            ))}\n            {/* <Button variant=\"contained\" startIcon={<Iconify icon={'eva:plus-fill'} />} sx={{ mr: 1 }}>\n            Add member\n          </Button>\n          <Button variant=\"contained\" startIcon={<Iconify icon={'eva:plus-fill'} />} sx={{ mr: 1 }}>\n            Add vision\n          </Button>\n          <Button variant=\"contained\" startIcon={<Iconify icon={'eva:plus-fill'} />}>\n            Add task\n          </Button> */}\n          </Box>\n        </Card>\n      </Box>\n      <DialogAnimate open={isOpenModal} onClose={() => setIsOpenModal(false)}>\n        <DialogTitle>{selectedDaoLabel}</DialogTitle>\n        <Box p=\"1.5rem\">\n          {selectedDaoId === DaoCallables.ADD_TASKS && (\n            <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n              <Typography> Form goes here..</Typography>\n            </Box>\n          )}\n\n          {selectedDaoId === DaoCallables.ADD_MEMBERS && (\n            <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n              <Select\n                options={selectOptions}\n                selectedOption={selectedOption}\n                onOptionSelect={onOptionSelect}\n                disabled={applicantsToOrganization?.length === 0}\n              />\n              <Button\n                variant=\"contained\"\n                startIcon={<Iconify icon={'eva:plus-fill'} />}\n                disabled={!selectedOption}\n              >\n                Accept member\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </DialogAnimate>\n    </>\n  );\n}\n","import { useState } from 'react';\n// @mui\nimport { Checkbox, TableRow, TableCell, MenuItem, IconButton, Collapse } from '@mui/material';\n// config\nimport { ICON } from '../../../config';\n// components\nimport Iconify from '../../Iconify';\nimport TableMoreMenu from './TableMoreMenu';\nimport { DaoCallables } from '../../../types';\nimport ExpandedRowContent from './ExpandedRowContent';\n// ----------------------------------------------------------------------\n\ntype Props = {\n  row: any;\n  selected: boolean;\n  onEditRow: VoidFunction;\n  onSelectRow: VoidFunction;\n};\n\nexport default function TableRowExpandable({ row, selected, onEditRow, onSelectRow }: Props) {\n  const { name, owner, daoActions, expandedContent } = row;\n\n  const [openMenu, setOpenMenuActions] = useState<HTMLElement | null>(null);\n\n  const [expanded, setExpanded] = useState(false);\n\n  const handleOpenMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setOpenMenuActions(event.currentTarget);\n  };\n\n  const handleCloseMenu = () => {\n    setOpenMenuActions(null);\n  };\n\n  const rowActions = daoActions.map(\n    (daoActionObject: { id: DaoCallables; label: string; cb: () => void }) => (\n      <MenuItem\n        key={daoActionObject.id}\n        onClick={() => {\n          daoActionObject.cb();\n          handleCloseMenu();\n        }}\n      >\n        <Iconify icon={'eva:edit-fill'} />\n        {daoActionObject.label}\n      </MenuItem>\n    )\n  );\n\n  return (\n    <>\n      <TableRow hover selected={selected}>\n        <TableCell padding=\"checkbox\">\n          <Checkbox checked={selected} onClick={onSelectRow} />\n        </TableCell>\n\n        <TableCell>{name}</TableCell>\n\n        <TableCell align=\"left\">{owner}</TableCell>\n\n        {/* <TableCell align=\"left\" sx={{ textTransform: 'capitalize' }}>\n          {joinDate}\n        </TableCell>\n\n        <TableCell align=\"center\">{tag}</TableCell>\n\n        <TableCell align=\"left\">{completedTask}</TableCell>\n\n        <TableCell align=\"left\">{status}</TableCell> */}\n\n        <TableCell align=\"right\">\n          <TableMoreMenu\n            open={openMenu}\n            onOpen={handleOpenMenu}\n            onClose={handleCloseMenu}\n            actions={rowActions}\n            // actions={\n            //   <>\n            //     <MenuItem\n            //       onClick={() => {\n            //         onDeleteRow();\n            //         handleCloseMenu();\n            //       }}\n            //       sx={{ color: 'error.main' }}\n            //     >\n            //       <Iconify icon={'eva:trash-2-outline'} />\n            //       Delete\n            //     </MenuItem>\n            //     <MenuItem\n            //       onClick={() => {\n            //         onEditRow();\n            //         handleCloseMenu();\n            //       }}\n            //     >\n            //       <Iconify icon={'eva:edit-fill'} />\n            //       Edit\n            //     </MenuItem>\n            //   </>\n            // }\n          />\n        </TableCell>\n\n        <TableCell align=\"right\">\n          <IconButton onClick={() => setExpanded(!expanded)}>\n            <Iconify\n              icon={expanded ? 'eva:chevron-up-fill' : 'eva:chevron-down-fill'}\n              sx={{\n                width: ICON.NAVBAR_ITEM_HORIZONTAL,\n                height: ICON.NAVBAR_ITEM_HORIZONTAL,\n              }}\n            />\n          </IconButton>\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n            <ExpandedRowContent data={expandedContent} />\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </>\n  );\n}\n","import { useState } from 'react';\n// @mui\nimport { Checkbox, TableRow, TableCell, MenuItem } from '@mui/material';\n// components\nimport Iconify from '../../Iconify';\nimport TableMoreMenu from './TableMoreMenu';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  row: any;\n  selected: boolean;\n  onEditRow: VoidFunction;\n  onSelectRow: VoidFunction;\n  onDeleteRow: VoidFunction;\n  daoSubpage?: 'organizations' | 'members' | 'tasks' | undefined;\n};\n\nexport default function TableRowGeneric({\n  row,\n  selected,\n  onEditRow,\n  onSelectRow,\n  onDeleteRow,\n  daoSubpage,\n}: Props) {\n  const [openMenu, setOpenMenuActions] = useState<HTMLElement | null>(null);\n\n  const handleOpenMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setOpenMenuActions(event.currentTarget);\n  };\n\n  const handleCloseMenu = () => {\n    setOpenMenuActions(null);\n  };\n\n  const rowActions = row.daoActions.map((daoAction: any) =>\n    !daoAction.isHidden ? (\n      <MenuItem\n        key={daoAction.id}\n        onClick={() => {\n          daoAction.cb();\n          handleCloseMenu();\n        }}\n      >\n        <Iconify icon={'eva:edit-fill'} />\n        {daoAction.label}\n      </MenuItem>\n    ) : null\n  );\n\n  return (\n    <>\n      {(!daoSubpage || daoSubpage !== 'tasks') && (\n        <TableRow hover selected={selected}>\n          <TableCell padding=\"checkbox\">\n            <Checkbox checked={selected} onClick={onSelectRow} />\n          </TableCell>\n\n          <TableCell>{row.name}</TableCell>\n\n          <TableCell align=\"right\">\n            <TableMoreMenu\n              open={openMenu}\n              onOpen={handleOpenMenu}\n              onClose={handleCloseMenu}\n              actions={rowActions}\n            />\n          </TableCell>\n        </TableRow>\n      )}\n      {daoSubpage === 'tasks' && (\n        <TableRow hover selected={selected}>\n          <TableCell padding=\"checkbox\">\n            <Checkbox checked={selected} onClick={onSelectRow} />\n          </TableCell>\n\n          <TableCell>{row.name}</TableCell>\n          <TableCell>{row.specification}</TableCell>\n          <TableCell>{row.budget}</TableCell>\n          <TableCell>{row.deadline}</TableCell>\n          <TableCell>{row.attachments}</TableCell>\n          <TableCell>{row.keywords}</TableCell>\n          <TableCell>{row.status}</TableCell>\n\n          <TableCell align=\"right\">\n            <TableMoreMenu\n              open={openMenu}\n              onOpen={handleOpenMenu}\n              onClose={handleCloseMenu}\n              actions={rowActions}\n            />\n          </TableCell>\n        </TableRow>\n      )}\n    </>\n  );\n}\n","import { Stack, InputAdornment, TextField, MenuItem } from '@mui/material';\n// components\nimport Iconify from '../../Iconify';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  optionsRole: string[];\n  filterName: string;\n  filterRole: string;\n  onFilterName: (value: string) => void;\n  onFilterRole: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport default function TableToolbar({\n  filterName,\n  filterRole,\n  onFilterName,\n  onFilterRole,\n  optionsRole,\n}: Props) {\n  return (\n    <Stack spacing={2} direction={{ xs: 'column', sm: 'row' }} sx={{ py: 2.5, px: 3 }}>\n      <TextField\n        fullWidth\n        select\n        label=\"Role\"\n        value={filterRole}\n        onChange={onFilterRole}\n        SelectProps={{\n          MenuProps: {\n            sx: { '& .MuiPaper-root': { maxHeight: 260 } },\n          },\n        }}\n        sx={{\n          maxWidth: { sm: 240 },\n          textTransform: 'capitalize',\n        }}\n      >\n        {optionsRole.map((option) => (\n          <MenuItem\n            key={option}\n            value={option}\n            sx={{\n              mx: 1,\n              my: 0.5,\n              borderRadius: 0.75,\n              typography: 'body2',\n              textTransform: 'capitalize',\n            }}\n          >\n            {option}\n          </MenuItem>\n        ))}\n      </TextField>\n\n      <TextField\n        fullWidth\n        value={filterName}\n        onChange={(event) => onFilterName(event.target.value)}\n        placeholder=\"Search...\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <Iconify\n                icon={'eva:search-fill'}\n                sx={{ color: 'text.disabled', width: 20, height: 20 }}\n              />\n            </InputAdornment>\n          ),\n        }}\n      />\n    </Stack>\n  );\n}\n","import { useState } from 'react';\n// @mui\nimport {\n  Box,\n  Tab,\n  Tabs,\n  Card,\n  Table,\n  Switch,\n  Tooltip,\n  Divider,\n  TableBody,\n  IconButton,\n  TableContainer,\n  TablePagination,\n  FormControlLabel,\n} from '@mui/material';\n// hooks\nimport useTable, { getComparator, emptyRows } from '../../../hooks/useTable';\n// components\nimport Iconify from '../../Iconify';\n// import Scrollbar from '../../Scrollbar';\nimport { TableNoData, TableEmptyRows, TableHeadCustom, TableSelectedActions } from '../../table';\nimport TableRowExpandable from './TableRowExpandable';\nimport TableRowGeneric from './TableRowGeneric';\nimport TableToolbar from './TableToolbar';\n\n// ----------------------------------------------------------------------\n\ntype TableRowType = any;\n\ntype TableData = TableRowType[];\n\nconst ROLE_OPTIONS = ['all', 'test1', 'test2', 'test3'];\n\ntype ListType = 'otherOrganization' | 'myOrganization';\n\ntype OrganizationsListProps = {\n  listType: ListType;\n  currentTab: string;\n  tabs: string[];\n  listHead: any[];\n  listData: TableData;\n  onTabSwitch: (event: React.SyntheticEvent<Element, Event>, tab: string) => void;\n  daoSubpage?: 'organizations' | 'members' | 'tasks';\n};\n\n// ----------------------------------------------------------------------\n\nexport default function DAOLists({\n  listType,\n  tabs,\n  currentTab,\n  listHead,\n  listData,\n  onTabSwitch,\n  daoSubpage,\n}: OrganizationsListProps) {\n  const {\n    dense,\n    page,\n    order,\n    orderBy,\n    rowsPerPage,\n    setPage,\n    //\n    selected,\n    setSelected,\n    onSelectRow,\n    onSelectAllRows,\n    //\n    onSort,\n    onChangeDense,\n    onChangePage,\n    onChangeRowsPerPage,\n  } = useTable();\n\n  const showGenericRow = listType === 'myOrganization' && daoSubpage !== 'organizations';\n\n  const [filterName, setFilterName] = useState('');\n\n  const [filterRole, setFilterRole] = useState('all');\n\n  const handleFilterName = (filterName: string) => {\n    setFilterName(filterName);\n    setPage(0);\n  };\n\n  const handleFilterRole = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFilterRole(event.target.value);\n  };\n\n  const handleDeleteRow = (id: string) => {\n    console.log('handleDeleteRow');\n\n    // const deleteRow = tableData.filter((row) => row.name !== id);\n    // setSelected([]);\n    // setTableData(deleteRow);\n  };\n\n  const handleDeleteRows = (selected: string[]) => {\n    console.log('handleDeleteRows');\n\n    // const deleteRows = tableData.filter((row) => !selected.includes(row.name));\n    // setSelected([]);\n    // setTableData(deleteRows);\n  };\n\n  const handleEditRow = (id: string) => {\n    console.log('handleEditRow');\n  };\n\n  const dataFiltered = applySortFilter({\n    listData,\n    comparator: getComparator(order, orderBy),\n    filterName,\n    filterRole,\n  });\n\n  const denseHeight = dense ? 52 : 72;\n\n  const isNotFound =\n    (!dataFiltered.length && !!filterName) ||\n    (!dataFiltered.length && !!filterRole) ||\n    (!dataFiltered.length && !!currentTab);\n\n  return (\n    <Card>\n      <Tabs\n        allowScrollButtonsMobile\n        variant=\"scrollable\"\n        scrollButtons=\"auto\"\n        value={currentTab}\n        onChange={(event, tab) => onTabSwitch(event, tab)}\n        sx={{ px: 2, bgcolor: 'background.neutral' }}\n      >\n        {tabs.map((tab) => (\n          <Tab disableRipple key={tab} label={tab} value={tab} />\n        ))}\n      </Tabs>\n\n      <Divider />\n\n      <TableToolbar\n        filterName={filterName}\n        filterRole={filterRole}\n        onFilterName={handleFilterName}\n        onFilterRole={handleFilterRole}\n        optionsRole={ROLE_OPTIONS}\n      />\n\n      {/* @TODO - Scrollbar causes lagging when expanding rows; consider removing it; adding workaround */}\n      {/* <Scrollbar> */}\n      <TableContainer sx={{ minWidth: 800, position: 'relative' }}>\n        {selected.length > 0 && (\n          <TableSelectedActions\n            dense={dense}\n            numSelected={selected.length}\n            rowCount={listData.length}\n            onSelectAllRows={(checked) =>\n              onSelectAllRows(\n                checked,\n                listData.map((row) => row.name)\n              )\n            }\n            actions={\n              <Tooltip title=\"Delete\">\n                <IconButton color=\"primary\" onClick={() => handleDeleteRows(selected)}>\n                  <Iconify icon={'eva:trash-2-outline'} />\n                </IconButton>\n              </Tooltip>\n            }\n          />\n        )}\n\n        <Table size={dense ? 'small' : 'medium'}>\n          <TableHeadCustom\n            order={order}\n            orderBy={orderBy}\n            headLabel={listHead}\n            rowCount={listData.length}\n            numSelected={selected.length}\n            onSort={onSort}\n            onSelectAllRows={(checked) =>\n              onSelectAllRows(\n                checked,\n                listData.map((row) => row.name)\n              )\n            }\n          />\n\n          <TableBody>\n            {dataFiltered\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row, index) =>\n                showGenericRow ? (\n                  <TableRowGeneric\n                    key={index}\n                    row={row}\n                    selected={selected.includes(row.name)}\n                    onSelectRow={() => onSelectRow(row.name)}\n                    onDeleteRow={() => handleDeleteRow(row.name)}\n                    onEditRow={() => handleEditRow(row.name)}\n                    daoSubpage={daoSubpage}\n                  />\n                ) : (\n                  <TableRowExpandable\n                    key={index}\n                    row={row}\n                    selected={selected.includes(row.name)}\n                    onSelectRow={() => onSelectRow(row.name)}\n                    onEditRow={() => handleEditRow(row.name)}\n                  />\n                )\n              )}\n\n            <TableEmptyRows\n              height={denseHeight}\n              emptyRows={emptyRows(page, rowsPerPage, listData.length)}\n            />\n\n            <TableNoData isNotFound={isNotFound} />\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {/* </Scrollbar> */}\n\n      <Box sx={{ position: 'relative' }}>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={dataFiltered.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={onChangePage}\n          onRowsPerPageChange={onChangeRowsPerPage}\n        />\n\n        <FormControlLabel\n          control={<Switch checked={dense} onChange={onChangeDense} />}\n          label=\"Dense\"\n          sx={{ px: 3, py: 1.5, top: 0, position: { md: 'absolute' } }}\n        />\n      </Box>\n    </Card>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nfunction applySortFilter({\n  listData,\n  comparator,\n  filterName,\n  filterRole,\n}: {\n  listData: TableData;\n  comparator: (a: any, b: any) => number;\n  filterName: string;\n  filterRole: string;\n}) {\n  const stabilizedThis = listData.map((el, index) => [el, index] as const);\n\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n\n  let returedListData = stabilizedThis.map((el) => el[0]);\n\n  if (filterName) {\n    returedListData = returedListData.filter(\n      (item: Record<string, any>) =>\n        item.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\n    );\n  }\n\n  if (filterRole !== 'all') {\n    returedListData = returedListData.filter(\n      (item: Record<string, any>) => item.tag === filterRole\n    );\n  }\n\n  return returedListData;\n}\n","// @mui\nimport { alpha, styled } from '@mui/material/styles';\nimport { Card, Typography, CardProps } from '@mui/material';\n// utils\nimport { fShortenNumber } from '../../../utils/formatNumber';\n// theme\nimport { ColorSchema } from '../../../theme/palette';\n// components\nimport Iconify from '../../Iconify';\n\n// ----------------------------------------------------------------------\n\nconst IconWrapperStyle = styled('div')(({ theme }) => ({\n  margin: 'auto',\n  display: 'flex',\n  borderRadius: '50%',\n  alignItems: 'center',\n  width: theme.spacing(8),\n  height: theme.spacing(8),\n  justifyContent: 'center',\n  marginBottom: theme.spacing(3),\n}));\n\n// ----------------------------------------------------------------------\n\ninterface Props extends CardProps {\n  title: string;\n  total: number;\n  icon: string;\n  color?: ColorSchema;\n}\n\nexport default function AnalyticsWidget({\n  title,\n  total,\n  icon,\n  color = 'primary',\n  sx,\n  ...other\n}: Props) {\n  return (\n    <Card\n      sx={{\n        py: 5,\n        boxShadow: 0,\n        textAlign: 'center',\n        color: (theme) => theme.palette[color].darker,\n        bgcolor: (theme) => theme.palette[color].lighter,\n        ...sx,\n      }}\n      {...other}\n    >\n      <IconWrapperStyle\n        sx={{\n          color: (theme) => theme.palette[color].dark,\n          backgroundImage: (theme) =>\n            `linear-gradient(135deg, ${alpha(theme.palette[color].dark, 0)} 0%, ${alpha(\n              theme.palette[color].dark,\n              0.24\n            )} 100%)`,\n        }}\n      >\n        <Iconify icon={icon} width={24} height={24} />\n      </IconWrapperStyle>\n\n      <Typography variant=\"h3\">{fShortenNumber(total)}</Typography>\n\n      <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n        {title}\n      </Typography>\n    </Card>\n  );\n}\n","import { Stack, TextField, MenuItem } from '@mui/material';\n// components\n// ----------------------------------------------------------------------\n\ntype Props = {\n  options: string[];\n  selectedOption: string;\n  disabled?: boolean;\n  onOptionSelect: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport default function Select({ selectedOption, onOptionSelect, options, disabled }: Props) {\n  return (\n    <Stack spacing={2} direction={{ xs: 'column', sm: 'row' }} sx={{ py: 2.5, px: 3 }} flex=\"1\">\n      <TextField\n        fullWidth\n        select\n        label=\"Select\"\n        value={selectedOption}\n        onChange={onOptionSelect}\n        SelectProps={{\n          MenuProps: {\n            sx: { '& .MuiPaper-root': { maxHeight: 260 } },\n          },\n        }}\n        sx={{\n          maxWidth: { sm: 240 },\n          textTransform: 'capitalize',\n        }}\n        disabled={disabled}\n      >\n        {options.map((option) => (\n          <MenuItem\n            key={option}\n            value={option}\n            sx={{\n              mx: 1,\n              my: 0.5,\n              borderRadius: 0.75,\n              typography: 'body2',\n              textTransform: 'capitalize',\n            }}\n          >\n            {option}\n          </MenuItem>\n        ))}\n      </TextField>\n    </Stack>\n  );\n}\n","import { useDropzone, DropzoneOptions } from 'react-dropzone';\nimport { useState, useCallback } from 'react';\n// @mui\nimport { alpha, styled } from '@mui/material/styles';\nimport { Box, IconButton } from '@mui/material';\n// utils\nimport getFileData from '../../../utils/getFileData';\n// components\nimport Image from '../../Image';\nimport Iconify from '../../Iconify';\nimport { varFade } from '../../animate';\n\n// ----------------------------------------------------------------------\n\nconst DropZoneStyle = styled('div')(({ theme }) => ({\n  width: 64,\n  height: 64,\n  fontSize: 24,\n  display: 'flex',\n  cursor: 'pointer',\n  alignItems: 'center',\n  justifyContent: 'center',\n  margin: theme.spacing(0.5),\n  borderRadius: theme.shape.borderRadius,\n  border: `dashed 1px ${theme.palette.divider}`,\n  '&:hover': { opacity: 0.72 },\n}));\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  attachments: string[];\n};\n\nexport default function KanbanTaskAttachments({ attachments }: Props) {\n  const [files, setFiles] = useState<(File | string)[]>(attachments);\n\n  const handleRemove = (file: File | string) => {\n    const filteredItems = files.filter((_file) => _file !== file);\n\n    if (typeof file === 'string') {\n      console.log('REMOVE file typeof === string');\n      setFiles(filteredItems);\n    }\n    setFiles(filteredItems);\n  };\n\n  const handleDrop = useCallback(\n    (acceptedFiles) => {\n      const newFiles = acceptedFiles.map((file: File) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        })\n      );\n\n      setFiles([...files, ...newFiles]);\n    },\n    [files]\n  );\n\n  return (\n    <>\n      {files.map((file, index) => {\n        const { key } = getFileData(file, index);\n\n        return <UploadFilePreview key={key} file={file} onRemove={() => handleRemove(file)} />;\n      })}\n\n      <UploadFile onDrop={handleDrop} />\n    </>\n  );\n}\n\n// ----------------------------------------------------------------------\n\ntype UploadFilePreviewProps = {\n  file: File | string;\n  onRemove: VoidFunction;\n};\n\nfunction UploadFilePreview({ file, onRemove }: UploadFilePreviewProps) {\n  const { preview } = getFileData(file);\n\n  return (\n    <Box\n      {...varFade().inRight}\n      sx={{\n        p: 0,\n        m: 0.5,\n        width: 64,\n        height: 64,\n        borderRadius: 1.25,\n        overflow: 'hidden',\n        position: 'relative',\n      }}\n    >\n      <Image\n        alt=\"preview\"\n        src={preview}\n        sx={{\n          height: 1,\n          position: 'absolute',\n          border: (theme) => `solid 1px ${theme.palette.divider}`,\n        }}\n      />\n\n      <Box sx={{ top: 6, right: 6, position: 'absolute' }}>\n        <IconButton\n          size=\"small\"\n          onClick={onRemove}\n          sx={{\n            p: '2px',\n            color: 'common.white',\n            bgcolor: (theme) => alpha(theme.palette.grey[900], 0.72),\n            '&:hover': {\n              bgcolor: (theme) => alpha(theme.palette.grey[900], 0.48),\n            },\n          }}\n        >\n          <Iconify icon={'eva:close-fill'} />\n        </IconButton>\n      </Box>\n    </Box>\n  );\n}\n\n// ----------------------------------------------------------------------\n\ntype UploadFileProps = DropzoneOptions;\n\nfunction UploadFile({ ...other }: UploadFileProps) {\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    ...other,\n  });\n\n  return (\n    <DropZoneStyle\n      {...getRootProps()}\n      sx={{\n        ...(isDragActive && { opacity: 0.72 }),\n      }}\n    >\n      <input {...getInputProps()} />\n\n      <Iconify icon=\"eva:plus-fill\" sx={{ color: 'text.disabled' }} />\n    </DropZoneStyle>\n  );\n}\n","import { useState, useRef } from 'react';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport {\n  Box,\n  Stack,\n  Radio,\n  Drawer,\n  Avatar,\n  Tooltip,\n  Divider,\n  Typography,\n  RadioGroup,\n  OutlinedInput,\n  FormControlLabel,\n} from '@mui/material';\n// hooks\nimport useToggle from '../../../hooks/useToggle';\nimport useDateRangePicker from '../../../hooks/useDateRangePicker';\n// /@types\nimport { KanbanCard } from '../../../@types/kanban';\n// components\nimport Label from '../../Label';\nimport Iconify from '../../Iconify';\nimport Scrollbar from '../../Scrollbar';\nimport { IconButtonAnimate } from '../../animate';\n//\nimport KanbanTaskDisplayTime from './KanbanTaskDisplayTime';\nimport KanbanTaskCommentList from './KanbanTaskCommentList';\nimport KanbanTaskAttachments from './KanbanTaskAttachments';\nimport KanbanTaskCommentInput from './KanbanTaskCommentInput';\nimport KanbanContactsDialog from './KanbanContactsDialog';\nimport KanbanDatePickerDialog from './KanbanDatePickerDialog';\nimport KanbanTaskDetailsToolbar from './KanbanTaskDetailsToolbar';\n\n// ----------------------------------------------------------------------\n\nconst PRIORITIZES = [\n  { value: 'low', label: 'Low' },\n  { value: 'medium', label: 'Medium' },\n  { value: 'hight', label: 'Hight' },\n];\n\nconst LabelStyle = styled(Typography)(({ theme }) => ({\n  ...theme.typography.body2,\n  width: 140,\n  fontSize: 13,\n  flexShrink: 0,\n  color: theme.palette.text.secondary,\n}));\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  card: KanbanCard;\n  isOpen: boolean;\n  onClose: VoidFunction;\n  onDeleteTask: VoidFunction;\n};\n\nexport default function KanbanTaskDetails({ card, isOpen, onClose, onDeleteTask }: Props) {\n  const { toggle: openContacts, onOpen: onOpenContacts, onClose: onCloseContacts } = useToggle();\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const [taskCompleted, setTaskCompleted] = useState(card.completed);\n\n  const [prioritize, setPrioritize] = useState('low');\n\n  const [like, setLike] = useState(false);\n\n  const { name, description, due, assignee, attachments, comments } = card;\n\n  const {\n    startTime,\n    endTime,\n    onChangeStartTime,\n    onChangeEndTime,\n    //\n    openPicker,\n    onOpenPicker,\n    onClosePicker,\n    //\n    isSameDays,\n    isSameMonths,\n  } = useDateRangePicker(due);\n\n  const handleAttach = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleLike = () => {\n    setLike((prev) => !prev);\n  };\n\n  const handleCompleted = () => {\n    setTaskCompleted((prev) => !prev);\n  };\n\n  const handleChangePrioritize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPrioritize((event.target as HTMLInputElement).value);\n  };\n\n  return (\n    <Drawer\n      open={isOpen}\n      onClose={onClose}\n      anchor=\"right\"\n      PaperProps={{ sx: { width: { xs: 1, sm: 480 } } }}\n    >\n      <KanbanTaskDetailsToolbar\n        card={card}\n        fileInputRef={fileInputRef}\n        isLike={like}\n        isCompleted={taskCompleted}\n        onLike={handleLike}\n        onAttach={handleAttach}\n        onDelete={onDeleteTask}\n        onToggleCompleted={handleCompleted}\n        onClose={onClose}\n      />\n\n      <Divider />\n\n      <Scrollbar>\n        <Stack spacing={3} sx={{ px: 2.5, py: 3 }}>\n          <OutlinedInput\n            fullWidth\n            multiline\n            size=\"small\"\n            placeholder=\"Task name\"\n            value={name}\n            sx={{\n              typography: 'h6',\n              '& .MuiOutlinedInput-notchedOutline': { borderColor: 'transparent' },\n            }}\n          />\n          <Stack direction=\"row\">\n            <LabelStyle sx={{ mt: 1.5 }}>Assignee</LabelStyle>\n            <Stack direction=\"row\" flexWrap=\"wrap\" alignItems=\"center\">\n              {assignee.map((user) => (\n                <Avatar\n                  key={user.id}\n                  alt={user.name}\n                  src={user.avatar}\n                  sx={{ m: 0.5, width: 36, height: 36 }}\n                />\n              ))}\n              <Tooltip title=\"Add assignee\">\n                <IconButtonAnimate\n                  onClick={onOpenContacts}\n                  sx={{ p: 1, ml: 0.5, border: (theme) => `dashed 1px ${theme.palette.divider}` }}\n                >\n                  <Iconify icon={'eva:plus-fill'} width={20} height={20} />\n                </IconButtonAnimate>\n              </Tooltip>\n\n              <KanbanContactsDialog open={openContacts} onClose={onCloseContacts} />\n            </Stack>\n          </Stack>\n\n          <Stack direction=\"row\" alignItems=\"center\">\n            <LabelStyle> Due date</LabelStyle>\n            <>\n              {startTime && endTime ? (\n                <KanbanTaskDisplayTime\n                  startTime={startTime}\n                  endTime={endTime}\n                  isSameDays={isSameDays}\n                  isSameMonths={isSameMonths}\n                  onOpenPicker={onOpenPicker}\n                  sx={{ typography: 'body2' }}\n                />\n              ) : (\n                <Tooltip title=\"Add assignee\">\n                  <IconButtonAnimate\n                    onClick={onOpenPicker}\n                    sx={{\n                      p: 1,\n                      ml: 0.5,\n                      border: (theme) => `dashed 1px ${theme.palette.divider}`,\n                    }}\n                  >\n                    <Iconify icon={'eva:plus-fill'} width={20} height={20} />\n                  </IconButtonAnimate>\n                </Tooltip>\n              )}\n\n              <KanbanDatePickerDialog\n                open={openPicker}\n                startTime={startTime}\n                endTime={endTime}\n                onChangeStartTime={onChangeStartTime}\n                onChangeEndTime={onChangeEndTime}\n                onClose={onClosePicker}\n              />\n            </>\n          </Stack>\n\n          <Stack direction=\"row\" alignItems=\"center\">\n            <LabelStyle>Prioritize</LabelStyle>\n            <RadioGroup row value={prioritize} onChange={handleChangePrioritize}>\n              {PRIORITIZES.map((option) => (\n                <Box key={option.value} sx={{ position: 'relative', mr: 1, lineHeight: 0 }}>\n                  <Label\n                    variant={option.value === prioritize ? 'filled' : 'ghost'}\n                    color={\n                      (option.value === 'low' && 'info') ||\n                      (option.value === 'medium' && 'warning') ||\n                      'error'\n                    }\n                    startIcon={\n                      option.value === prioritize ? <Iconify icon=\"eva:checkmark-fill\" /> : null\n                    }\n                  >\n                    {option.label}\n                  </Label>\n\n                  <FormControlLabel\n                    value={option.value}\n                    control={<Radio sx={{ display: 'none' }} />}\n                    label={null}\n                    sx={{\n                      m: 0,\n                      top: 0,\n                      left: 0,\n                      right: 0,\n                      bottom: 0,\n                      position: 'absolute',\n                    }}\n                  />\n                </Box>\n              ))}\n            </RadioGroup>\n          </Stack>\n\n          <Stack direction=\"row\">\n            <LabelStyle sx={{ mt: 2 }}>Description</LabelStyle>\n            <OutlinedInput\n              fullWidth\n              multiline\n              rows={3}\n              size=\"small\"\n              placeholder=\"Task name\"\n              value={description}\n              sx={{ typography: 'body2' }}\n            />\n          </Stack>\n\n          <Stack direction=\"row\">\n            <LabelStyle sx={{ mt: 2 }}>Attachments</LabelStyle>\n            <Stack direction=\"row\" flexWrap=\"wrap\">\n              <KanbanTaskAttachments attachments={attachments} />\n            </Stack>\n          </Stack>\n        </Stack>\n\n        {comments.length > 0 && <KanbanTaskCommentList comments={comments} />}\n      </Scrollbar>\n\n      <Divider />\n\n      <KanbanTaskCommentInput />\n    </Drawer>\n  );\n}\n","import * as Yup from 'yup';\nimport merge from 'lodash/merge';\nimport { useSnackbar } from 'notistack';\n// form\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport { Stack, Button, DialogActions } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { FormProvider, RHFTextField } from '../../hook-form';\nimport { useTasks } from 'src/hooks/universaldot';\nimport { TaskCallables } from 'src/types';\n\n// ----------------------------------------------------------------------\n\ntype TaskForm = {\n  title: string;\n  specification: string;\n  budget: string;\n  deadline: string;\n  attachments: string;\n  keywords: string;\n};\n\nconst getInitialValues = (taskForm: TaskForm | null) => {\n  const _taskForm = {\n    title: '',\n    specification: '',\n    budget: '',\n    deadline: '',\n    attachments: '',\n    keywords: '',\n  };\n\n  if (taskForm) {\n    return merge({}, _taskForm, taskForm);\n  }\n\n  return _taskForm;\n};\n\n// ----------------------------------------------------------------------\n\ntype FormValuesProps = {\n  title: string;\n  specification: string;\n  budget: string;\n  deadline: string;\n  attachments: string;\n  keywords: string;\n};\n\ntype Props = {\n  taskForm: TaskForm;\n  taskIdForEdit?: string;\n  onCancel: VoidFunction;\n};\n\nexport default function CreateTaskForm({ taskForm, taskIdForEdit, onCancel }: Props) {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { taskAction } = useTasks();\n\n  const TaskSchema = Yup.object().shape({\n    title: Yup.string().max(255).required('Title is required'),\n    specification: Yup.string().max(1000),\n  });\n\n  const methods = useForm({\n    resolver: yupResolver(TaskSchema),\n    defaultValues: getInitialValues(taskForm),\n  });\n\n  const {\n    reset,\n    watch,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = (data: FormValuesProps) => {\n    if (taskIdForEdit) {\n      const updatedTask = {\n        taskId: taskIdForEdit,\n        title: data.title,\n        specification: data.specification,\n        budget: data.budget,\n        deadline: data.deadline,\n        attachments: data.attachments,\n        keywords: data.keywords,\n      };\n      taskAction(TaskCallables.UPDATE_TASK, updatedTask, enqueueSnackbar);\n    } else {\n      const newTask = {\n        title: data.title,\n        specification: data.specification,\n        budget: data.budget,\n        deadline: data.deadline,\n        attachments: data.attachments,\n        keywords: data.keywords,\n      };\n      enqueueSnackbar('Create success!');\n      taskAction(TaskCallables.CREATE_TASK, newTask, enqueueSnackbar);\n    }\n    onCancel();\n    reset();\n  };\n\n  // @TODO: see what it is for;\n  const values = watch();\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3} sx={{ p: 3 }}>\n        <RHFTextField name=\"title\" label=\"Title\" />\n\n        <RHFTextField name=\"specification\" label=\"Specification\" multiline rows={4} />\n\n        <RHFTextField name=\"budget\" label=\"Budget\" />\n\n        <RHFTextField name=\"deadline\" label=\"Deadline\" />\n\n        <RHFTextField name=\"attachments\" label=\"Attachments\" />\n\n        <RHFTextField name=\"keywords\" label=\"Keywords\" />\n      </Stack>\n\n      <DialogActions>\n        <Button variant=\"outlined\" color=\"inherit\" onClick={onCancel}>\n          Cancel\n        </Button>\n\n        <LoadingButton\n          type=\"submit\"\n          variant=\"contained\"\n          // loading={isSubmitting}\n        >\n          {taskIdForEdit ? 'Update' : 'Create'}\n        </LoadingButton>\n      </DialogActions>\n    </FormProvider>\n  );\n}\n","import * as Yup from 'yup';\nimport merge from 'lodash/merge';\nimport { useSnackbar } from 'notistack';\n// form\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport { Box, Stack, Button, DialogActions } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// components\nimport { FormProvider, RHFTextField } from '../../hook-form';\nimport { useDao } from 'src/hooks/universaldot';\nimport { DaoCallables } from 'src/types';\n\n// ----------------------------------------------------------------------\n\ntype AddTaskToOrgForm = {\n  organizationId: string;\n  taskId: string;\n};\n\nconst getInitialValues = (form: AddTaskToOrgForm | null) => {\n  const _form = {\n    organizationId: '',\n    taskId: '',\n  };\n\n  if (form) {\n    return merge({}, _form, form);\n  }\n\n  return _form;\n};\n\n// ----------------------------------------------------------------------\n\ntype FormValuesProps = {\n  organizationId: string;\n  taskId: string;\n};\n\ntype Props = {\n  form: AddTaskToOrgForm;\n  onCancel: VoidFunction;\n};\n\nexport default function AddTaskToOrganizationForm({ form, onCancel }: Props) {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { daoAction } = useDao();\n\n  const isCreating = Object.keys(form).length === 0;\n\n  const FormSchema = Yup.object().shape({\n    organizationId: Yup.string().max(255).required('Title is required'),\n    taskId: Yup.string().max(1000).required('Title is required'),\n  });\n\n  const methods = useForm({\n    resolver: yupResolver(FormSchema),\n    defaultValues: getInitialValues(form),\n  });\n\n  const {\n    reset,\n    watch,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = async (data: FormValuesProps) => {\n    try {\n      const payload = [data.organizationId, data.taskId];\n\n      daoAction(DaoCallables.ADD_TASKS, payload, enqueueSnackbar);\n      onCancel();\n      reset();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // const handleDelete = async () => {\n  //   if (!taskForm.title) return;\n  //   try {\n  //     onCancel();\n  //     dispatch(resetTaskForm());\n  //     enqueueSnackbar('Delete success!');\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // };\n\n  const values = watch();\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3} sx={{ p: 3 }}>\n        <RHFTextField name=\"organizationId\" label=\"Organization ID\" />\n\n        <RHFTextField name=\"taskId\" label=\"Task ID\" />\n      </Stack>\n\n      <DialogActions>\n        {/* {!isCreating && (\n          <Tooltip title=\"Delete Event\">\n            <IconButton onClick={handleDelete}>\n              <Iconify icon=\"eva:trash-2-outline\" width={20} height={20} />\n            </IconButton>\n          </Tooltip>\n        )} */}\n        <Box sx={{ flexGrow: 1 }} />\n\n        <Button variant=\"outlined\" color=\"inherit\" onClick={onCancel}>\n          Cancel\n        </Button>\n\n        <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n          Add\n        </LoadingButton>\n      </DialogActions>\n    </FormProvider>\n  );\n}\n","import * as Yup from 'yup';\nimport merge from 'lodash/merge';\nimport { useSnackbar } from 'notistack';\n// form\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport { Box, Stack, Button, DialogActions } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// components\nimport { FormProvider, RHFTextField } from '../../hook-form';\nimport { useTasks } from 'src/hooks/universaldot';\nimport { TaskCallables } from 'src/types';\n\n// ----------------------------------------------------------------------\n\ntype RejectTaskFormType = {\n  feedback: string;\n};\n\nconst getInitialValues = (form: RejectTaskFormType | null) => {\n  const _form = {\n    feedback: '',\n  };\n\n  if (form) {\n    return merge({}, _form, form);\n  }\n\n  return _form;\n};\n\n// ----------------------------------------------------------------------\n\ntype FormValuesProps = {\n  feedback: string;\n};\n\ntype Props = {\n  form: RejectTaskFormType;\n  onCancel: VoidFunction;\n  taskId: string;\n};\n\nexport default function RejectTaskForm({ form, onCancel, taskId }: Props) {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { taskAction } = useTasks();\n\n  const FormSchema = Yup.object().shape({\n    feedback: Yup.string().max(255).required('Title is required'),\n  });\n\n  const methods = useForm({\n    resolver: yupResolver(FormSchema),\n    defaultValues: getInitialValues(form),\n  });\n\n  const {\n    reset,\n    watch,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = async (data: FormValuesProps) => {\n    try {\n      const payload = [taskId, data.feedback];\n\n      taskAction(TaskCallables.REJECT_TASK, payload, enqueueSnackbar);\n      onCancel();\n      reset();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const values = watch();\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3} sx={{ p: 3 }}>\n        <RHFTextField name=\"feedback\" label=\"Feedback\" multiline rows={4} />\n      </Stack>\n\n      <DialogActions>\n        <Box sx={{ flexGrow: 1 }} />\n\n        <Button variant=\"outlined\" color=\"inherit\" onClick={onCancel}>\n          Cancel\n        </Button>\n\n        <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n          Reject and send feedback\n        </LoadingButton>\n      </DialogActions>\n    </FormProvider>\n  );\n}\n","import * as Yup from 'yup';\nimport merge from 'lodash/merge';\nimport { useSnackbar } from 'notistack';\n// form\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport { Box, Stack, Button, DialogActions } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// components\nimport { FormProvider, RHFTextField } from '../../hook-form';\nimport { useDao } from 'src/hooks/universaldot';\nimport { DaoCallables } from 'src/types';\n\n// ----------------------------------------------------------------------\n\ntype FormType = {\n  name: string;\n  description: string;\n  vision: string;\n};\n\nconst getInitialValues = (form: FormType | null) => {\n  const _form = {\n    name: '',\n    description: '',\n    vision: '',\n  };\n\n  if (form) {\n    return merge({}, _form, form);\n  }\n\n  return _form;\n};\n\n// ----------------------------------------------------------------------\n\ntype FormValuesProps = {\n  name: string;\n  description: string;\n  vision: string;\n};\n\ntype Props = {\n  form: FormType;\n  onCancel: VoidFunction;\n  organizationId?: string;\n};\n\nexport default function OrganizationCreateAndUpdateForm({ form, onCancel, organizationId }: Props) {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { daoAction } = useDao();\n\n  const FormSchema = Yup.object().shape({\n    name: Yup.string().max(255).required('Name is required'),\n    description: Yup.string().max(255).required('Description is required'),\n    vision: Yup.string().max(255).required('Vision is required'),\n  });\n\n  const methods = useForm({\n    resolver: yupResolver(FormSchema),\n    defaultValues: getInitialValues(form),\n  });\n\n  const {\n    reset,\n    watch,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = async (data: FormValuesProps) => {\n    try {\n      if (organizationId) {\n        const payload = [organizationId, data.name, data.description, data.vision];\n        daoAction(DaoCallables.UPDATE_ORGANIZATION, payload, enqueueSnackbar);\n      } else {\n        const payload = [data.name, data.description, data.vision];\n        daoAction(DaoCallables.CREATE_ORGANIZATION, payload, enqueueSnackbar);\n      }\n\n      onCancel();\n      reset();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const values = watch();\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3} sx={{ p: 3 }}>\n        <RHFTextField name=\"name\" label=\"Name\" />\n        <RHFTextField name=\"description\" label=\"Description\" />\n        <RHFTextField name=\"vision\" label=\"Vision\" />\n      </Stack>\n\n      <DialogActions>\n        <Box sx={{ flexGrow: 1 }} />\n\n        <Button variant=\"outlined\" color=\"inherit\" onClick={onCancel}>\n          Cancel\n        </Button>\n\n        <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n          {organizationId ? 'Update organization' : 'Create organization'}\n        </LoadingButton>\n      </DialogActions>\n    </FormProvider>\n  );\n}\n","import * as Yup from 'yup';\nimport merge from 'lodash/merge';\nimport { useSnackbar } from 'notistack';\n// form\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport { Box, Stack, Button, DialogActions } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// components\nimport { FormProvider, RHFTextField } from '../../hook-form';\nimport { useDao } from 'src/hooks/universaldot';\nimport { DaoCallables } from 'src/types';\n\n// ----------------------------------------------------------------------\n\ntype FormType = {\n  newOwnerId: string;\n};\n\nconst getInitialValues = (form: FormType | null) => {\n  const _form = {\n    newOwnerId: '',\n  };\n\n  if (form) {\n    return merge({}, _form, form);\n  }\n\n  return _form;\n};\n\n// ----------------------------------------------------------------------\n\ntype FormValuesProps = {\n  newOwnerId: string;\n};\n\ntype Props = {\n  form: FormType;\n  onCancel: VoidFunction;\n  organizationId: string;\n};\n\nexport default function OrganizationTransferOwnershipForm({\n  form,\n  onCancel,\n  organizationId,\n}: Props) {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { daoAction } = useDao();\n\n  const FormSchema = Yup.object().shape({\n    newOwnerId: Yup.string().max(255).required('Title is required'),\n  });\n\n  const methods = useForm({\n    resolver: yupResolver(FormSchema),\n    defaultValues: getInitialValues(form),\n  });\n\n  const {\n    reset,\n    watch,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = async (data: FormValuesProps) => {\n    try {\n      const payload = [organizationId, data.newOwnerId];\n\n      daoAction(DaoCallables.TRANSFER_OWNERSHIP, payload, enqueueSnackbar);\n      onCancel();\n      reset();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const values = watch();\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3} sx={{ p: 3 }}>\n        <RHFTextField name=\"newOwnerId\" label=\"New Owner ID\" />\n      </Stack>\n\n      <DialogActions>\n        <Box sx={{ flexGrow: 1 }} />\n\n        <Button variant=\"outlined\" color=\"inherit\" onClick={onCancel}>\n          Cancel\n        </Button>\n\n        <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n          Transfer ownership\n        </LoadingButton>\n      </DialogActions>\n    </FormProvider>\n  );\n}\n"],"names":["RootStyle","styled","theme","ownerState","isLight","palette","mode","color","variant","height","minWidth","lineHeight","borderRadius","cursor","alignItems","whiteSpace","display","justifyContent","padding","spacing","grey","fontSize","typography","pxToRem","fontFamily","backgroundColor","fontWeight","fontWeightBold","contrastText","main","styleFilled","border","styleOutlined","alpha","styleGhost","text","primary","secondary","common","white","Label","children","startIcon","endIcon","sx","useTheme","style","width","objectFit","pl","pr","mr","ml","descendingComparator","a","b","orderBy","getComparator","order","emptyRows","page","rowsPerPage","arrayLength","Math","max","Box","textAlign","flexDirection","EmptyContent","title","description","img","other","disabledEffect","visibleByDefault","alt","src","mb","gutterBottom","TableNoData","isNotFound","colSpan","p","TableEmptyRows","visuallyHidden","margin","overflow","position","clip","TableHeadCustom","rowCount","headLabel","numSelected","onSort","onSelectAllRows","TableHead","indeterminate","checked","onChange","event","target","map","headCell","align","sortDirection","id","TableSortLabel","hideSortIcon","active","direction","onClick","textTransform","label","TableSelectedActions","dense","actions","px","top","left","right","zIndex","bgcolor","flexGrow","TableMoreMenu","open","onClose","onOpen","icon","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","arrow","mt","ExpandedRowContent","data","organizationId","vision","createdAt","lastUpdatedAt","daoActions","enqueueSnackbar","useSnackbar","isOpenModal","setIsOpenModal","useState","selectedDaoLabel","setSelectedDaoLabel","selectedDaoId","setSelectedDaoId","getApplicantsToOrganization","applicantsToOrganization","useDao","selectedOption","setSelectedOption","selectOptions","setSelectOptions","useEffect","DaoCallables","length","mappedOptions","applicantToOrganization","name","pt","pb","maxWidth","flex","xs","sm","daoAction","index","Select","options","onOptionSelect","value","disabled","TableRowExpandable","row","selected","onEditRow","onSelectRow","owner","expandedContent","openMenu","setOpenMenuActions","expanded","setExpanded","handleCloseMenu","rowActions","daoActionObject","cb","hover","currentTarget","ICON","paddingBottom","paddingTop","Collapse","in","timeout","unmountOnExit","TableRowGeneric","onDeleteRow","daoSubpage","handleOpenMenu","isHidden","specification","budget","deadline","attachments","keywords","status","TableToolbar","filterName","filterRole","onFilterName","onFilterRole","optionsRole","py","fullWidth","select","SelectProps","MenuProps","maxHeight","option","mx","my","placeholder","InputProps","startAdornment","ROLE_OPTIONS","DAOLists","listType","tabs","currentTab","listHead","listData","onTabSwitch","setPage","setSelected","onChangeDense","onChangePage","onChangeRowsPerPage","props","setDense","defaultDense","setOrderBy","defaultOrderBy","setOrder","defaultOrder","defaultCurrentPage","setRowsPerPage","defaultRowsPerPage","defaultSelected","selectedIndex","indexOf","newSelected","concat","slice","newSelecteds","newPage","parseInt","useTable","showGenericRow","setFilterName","setFilterRole","handleEditRow","console","log","dataFiltered","comparator","stabilizedThis","el","sort","returedListData","filter","item","toLowerCase","tag","applySortFilter","denseHeight","Tabs","allowScrollButtonsMobile","scrollButtons","tab","Tab","disableRipple","TableContainer","Table","size","TableBody","includes","TablePagination","rowsPerPageOptions","component","count","onPageChange","onRowsPerPageChange","control","Switch","md","marginBottom","shape","divider","opacity","Typography","body2","flexShrink","getInitialValues","taskForm","_taskForm","merge","CreateTaskForm","taskIdForEdit","onCancel","taskAction","useTasks","TaskSchema","Yup","required","methods","useForm","resolver","yupResolver","defaultValues","reset","watch","handleSubmit","formState","isSubmitting","onSubmit","updatedTask","taskId","TaskCallables","newTask","multiline","rows","LoadingButton","type","form","_form","AddTaskToOrganizationForm","FormSchema","Object","keys","async","payload","error","loading","feedback","RejectTaskForm","OrganizationCreateAndUpdateForm","newOwnerId","OrganizationTransferOwnershipForm"],"sourceRoot":""}