{"version":3,"file":"static/js/994.ad42486c.chunk.js","mappings":"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","sources":["pages/OrganizationOwn.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n// @mui\nimport { Container, Box, Button, DialogTitle } from '@mui/material';\n// hooks\nimport useSettings from '../hooks/useSettings';\nimport useTabs from '../hooks/useTabs';\nimport { useUser, useDao, useTasks } from '../hooks/universaldot';\n// routes\nimport { PATH_UNIVERSALDOT } from '../routes/paths';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport Iconify from '../components/Iconify';\nimport { DialogAnimate } from '../components/animate';\n// universaldot\nimport {\n  DAOLists,\n  // DAOAnalytics,\n  Select,\n  // Kanban,\n  CreateTaskForm,\n  AddTaskToOrganizationForm,\n  RejectTaskForm,\n  OrganizationCreateAndUpdateForm,\n  OrganizationTransferOwnershipForm,\n} from '../components/universaldot/DAO';\nimport { DaoCallables, Pallets, TaskCallables, TaskStatusEnum } from '../types';\nimport { useSnackbar } from 'notistack';\n// ----------------------------------------------------------------------\n\ntype OrganizationOwnProps = {\n  subPage: 'organizations' | 'members' | 'tasks';\n};\n\nconst TABLE_HEAD_MY_ORG = [\n  { id: 'name', label: 'Name', align: 'left' },\n  { id: 'owner', label: 'Owner', align: 'left' },\n  { id: 'actions' },\n  { id: 'expandRow' },\n];\n\nconst TABLE_HEAD_VISIONS_MEMBERS = [\n  { id: 'name', label: 'Name', align: 'left' },\n  { id: 'actions' },\n];\n\nconst TABLE_HEAD_TASKS = [\n  { id: 'name', label: 'Name', align: 'left' },\n  { id: 'specification', label: 'Specification', align: 'left' },\n  { id: 'budget', label: 'Budget', align: 'left' },\n  { id: 'deadline', label: 'Deadline', align: 'left' },\n  { id: 'attachments', label: 'Attachments', align: 'left' },\n  { id: 'keywords', label: 'Keywords', align: 'left' },\n  { id: 'status', label: 'Status', align: 'left' },\n  { id: 'actions' },\n];\n\nconst defaultTaskFormData = {\n  title: '',\n  specification: '',\n  budget: '',\n  deadline: '',\n  attachments: '',\n  keywords: '',\n};\n\nconst defaultAddTaskToOrganizationFormData = {\n  organizationId: '',\n  taskId: '',\n};\n\nconst defaultRejectTaskFormData = {\n  feedback: '',\n};\n\nconst defaultOrganizationFormData = {\n  name: '',\n  description: '',\n  vision: '',\n};\n\nconst defaultOrganizationTransferOwnershipFormData = {\n  newOwnerId: '',\n};\n\nconst TAB_OPTIONS = ['All'];\n\nexport default function OrganizationOwn({ subPage }: OrganizationOwnProps) {\n  const { themeStretch } = useSettings();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { currentTab } = useTabs('All');\n\n  const { taskAction } = useTasks();\n\n  const [selectedOption, setSelectedOption] = useState('');\n  const [selectOptions, setSelectOptions] = useState([]);\n\n  const [listDataMembers, setListDataMembers] = useState([]);\n  const [listDataOwnOrganizations, setListDataOwnOrganizations] = useState([]);\n  const [listDataTasks, setListDataTasks] = useState([]);\n\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [modalType, setModalType] = useState<\n    | 'addToOrg'\n    | 'createTask'\n    | 'updateTask'\n    | 'rejectFeedback'\n    | 'createOrganization'\n    | 'updateOrganization'\n    | 'transferOwnershipOrganization'\n  >('createTask');\n  const [taskIdInEdit, setTaskIdInEdit] = useState<string>('');\n  const [taskIdToReject, setTaskIdToReject] = useState<string>('');\n\n  const [taskFormData, setTaskFormData] = useState(defaultTaskFormData);\n  const [addTaskToOrganizationFormData] = useState(defaultAddTaskToOrganizationFormData);\n  const [rejectTaskFormData] = useState(defaultRejectTaskFormData);\n\n  const [organizationFormData, setOrganizationFormData] = useState(defaultOrganizationFormData);\n  const [organizationTransferOwnershipFormData] = useState(\n    defaultOrganizationTransferOwnershipFormData\n  );\n\n  const [organizationIdInUse, setOrganizationIdInUse] = useState<string>('');\n\n  const { selectedKeyring } = useUser();\n  const {\n    getOwnOrganizations,\n    ownOrganizations,\n    getMembersOfAnOrganization,\n    membersOfTheSelectedOrganization,\n    daoAction,\n    getOrganizationTasks,\n    organizationTasks,\n  } = useDao();\n\n  useEffect(() => {\n    if (selectedKeyring.value) {\n      getOwnOrganizations(selectedKeyring.value);\n    }\n  }, [selectedKeyring.value, getOwnOrganizations]);\n\n  useEffect(() => {\n    if (ownOrganizations) {\n      const mappedOptions = ownOrganizations.map((ownOrganization: any) => ownOrganization.name);\n      setSelectOptions(mappedOptions);\n\n      const tableData = ownOrganizations.map((ownOrganization: any) => ({\n        id: ownOrganization.id,\n        name: ownOrganization.name,\n        owner: ownOrganization.owner,\n        expandedContent: {\n          organizationId: ownOrganization.id,\n          description: ownOrganization.description,\n          vision: ownOrganization.vision,\n          createdAt: ownOrganization.createdTime,\n          lastUpdatedAt: ownOrganization.lastUpdated,\n          daoActions: [\n            {\n              id: DaoCallables.ADD_MEMBERS,\n              label: 'Add members',\n              cb: () => daoAction(DaoCallables.ADD_MEMBERS, '@TODO payload', enqueueSnackbar),\n            },\n          ],\n        },\n        daoActions: [\n          {\n            id: DaoCallables.DISSOLVE_ORGANIZATION,\n            label: 'Dissolve organization',\n            cb: () =>\n              daoAction(DaoCallables.DISSOLVE_ORGANIZATION, ownOrganization.id, enqueueSnackbar),\n          },\n          {\n            id: DaoCallables.UPDATE_ORGANIZATION,\n            label: 'Update organization',\n            cb: () => {\n              setIsOpenModal(true);\n              setModalType('updateOrganization');\n              setOrganizationIdInUse(ownOrganization.id);\n              setOrganizationFormData({\n                name: ownOrganization.name,\n                description: ownOrganization.description,\n                vision: ownOrganization.vision,\n              });\n            },\n          },\n          {\n            id: DaoCallables.TRANSFER_OWNERSHIP,\n            label: 'Transfer ownership',\n            cb: () => {\n              setIsOpenModal(true);\n              setOrganizationIdInUse(ownOrganization.id);\n              setModalType('transferOwnershipOrganization');\n            },\n          },\n        ],\n      }));\n      setListDataOwnOrganizations(tableData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ownOrganizations]);\n\n  useEffect(() => {\n    if (membersOfTheSelectedOrganization && organizationIdInUse) {\n      const tableData = membersOfTheSelectedOrganization.map((member: any) => ({\n        name: member.name,\n        daoActions: [\n          {\n            id: DaoCallables.REMOVE_MEMBERS,\n            label: 'Remove member',\n            cb: () =>\n              daoAction(\n                DaoCallables.REMOVE_MEMBERS,\n                [organizationIdInUse, member.owner],\n                enqueueSnackbar\n              ),\n          },\n        ],\n      }));\n      setListDataMembers(tableData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [membersOfTheSelectedOrganization, organizationIdInUse]);\n\n  useEffect(() => {\n    if (organizationTasks) {\n      const tableData = organizationTasks.map((task: any) => ({\n        name: task.title,\n        specification: task.specification,\n        budget: task.budget,\n        deadline: task.deadline,\n        attachments: task.attachments,\n        keywords: task.keywords,\n        status: task.status,\n        daoActions: [\n          {\n            id: DaoCallables.REMOVE_TASKS,\n            label: 'Remove task',\n            cb: () =>\n              daoAction(DaoCallables.REMOVE_TASKS, [task.organizationId, task.id], enqueueSnackbar),\n          },\n          {\n            id: TaskCallables.UPDATE_TASK,\n            label: 'Update task',\n            cb: () => {\n              setIsOpenModal(true);\n              setModalType('updateTask');\n              setTaskIdInEdit(task.id);\n              setTaskFormData({\n                title: task.title,\n                specification: task.specification,\n                budget: task.budget.replaceAll(',', ''),\n                deadline: task.deadline.replaceAll(',', ''),\n                attachments: task.attachments,\n                keywords: task.keywords,\n              });\n            },\n          },\n          {\n            id: TaskCallables.ACCEPT_TASK,\n            label: 'Accept task',\n            cb: () => taskAction(TaskCallables.ACCEPT_TASK, [task.id], enqueueSnackbar),\n            isHidden: task.status !== TaskStatusEnum.COMPLETED ? true : false,\n          },\n          {\n            id: TaskCallables.REJECT_TASK,\n            label: 'Reject task',\n            cb: () => {\n              setIsOpenModal(true);\n              setModalType('rejectFeedback');\n            },\n            isHidden: task.status !== TaskStatusEnum.COMPLETED ? true : false,\n          },\n        ],\n      }));\n\n      setListDataTasks(tableData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [organizationTasks]);\n\n  const onOptionSelect = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    subpage: 'members' | 'tasks'\n  ) => {\n    setSelectedOption(event.target.value);\n\n    const orgId = ownOrganizations.find(\n      (joinedOrg: any) => joinedOrg.name === event.target.value\n    ).id;\n\n    setOrganizationIdInUse(orgId);\n\n    if (orgId) {\n      if (subpage === 'members') {\n        getMembersOfAnOrganization(orgId, DaoCallables.MEMBERS, enqueueSnackbar);\n      }\n\n      if (subpage === 'tasks') {\n        getOrganizationTasks(orgId, DaoCallables.ORGANIZATION_TASKS, enqueueSnackbar);\n      }\n    }\n  };\n\n  const onTabSwitch = (event: React.SyntheticEvent<Element, Event>, tab: string) => {\n    console.log('not needed tab switch');\n    return;\n  };\n\n  const createTaskCleanup = () => {\n    setIsOpenModal(false);\n    setTaskFormData(defaultTaskFormData);\n  };\n\n  const updateTaskCleanup = () => {\n    setIsOpenModal(false);\n    setModalType('createTask');\n    setTaskIdInEdit('');\n    setTaskFormData(defaultTaskFormData);\n  };\n\n  const addTaskToOrganizationCleanup = () => {\n    setIsOpenModal(false);\n  };\n  const rejectTaskCleanup = () => {\n    setIsOpenModal(false);\n    setTaskIdToReject('');\n  };\n  const organizationUpdateAndTransferOwnershipCleanup = () => {\n    setIsOpenModal(false);\n    setOrganizationIdInUse('');\n  };\n\n  const formActionCb = useCallback(\n    (palletType: Pallets, actionType: DaoCallables | TaskCallables, payload: any) => {\n      if (palletType === Pallets.DAO) {\n        daoAction(actionType, payload, enqueueSnackbar);\n      }\n\n      if (palletType === Pallets.TASK) {\n        taskAction(actionType, payload, enqueueSnackbar);\n      }\n    },\n    []\n  );\n\n  return (\n    <Page title=\"My organization\">\n      <Container maxWidth={themeStretch ? false : 'xl'}>\n        <HeaderBreadcrumbs\n          heading=\"DAO\"\n          links={[\n            { name: 'Organization', href: PATH_UNIVERSALDOT.dao.root },\n            { name: 'My organization' },\n            { name: subPage },\n          ]}\n        />\n        {/* <DAOAnalytics /> */}\n        {selectOptions && subPage === 'members' && (\n          <Select\n            options={selectOptions}\n            selectedOption={selectedOption}\n            onOptionSelect={(event) => onOptionSelect(event, 'members')}\n          />\n        )}\n        {selectOptions && subPage === 'tasks' && (\n          <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n            <Select\n              options={selectOptions}\n              selectedOption={selectedOption}\n              onOptionSelect={(event) => onOptionSelect(event, 'tasks')}\n            />\n            <Button\n              variant=\"contained\"\n              startIcon={<Iconify icon={'eva:plus-fill'} />}\n              onClick={() => {\n                setIsOpenModal(true);\n                setModalType('addToOrg');\n              }}\n              style={{ marginRight: '1rem' }}\n            >\n              Add task to organization\n            </Button>\n            <Button\n              variant=\"contained\"\n              startIcon={<Iconify icon={'eva:plus-fill'} />}\n              onClick={() => {\n                setIsOpenModal(true);\n                setModalType('createTask');\n              }}\n            >\n              Create task\n            </Button>\n          </Box>\n        )}\n        {/* {subPage === 'tasks' && <Kanban />} */}\n        {subPage === 'tasks' && (\n          <DAOLists\n            listType=\"myOrganization\"\n            tabs={TAB_OPTIONS}\n            currentTab={currentTab}\n            onTabSwitch={onTabSwitch}\n            listHead={TABLE_HEAD_TASKS}\n            listData={listDataTasks}\n            daoSubpage={subPage}\n          />\n        )}\n        {subPage === 'members' && (\n          <DAOLists\n            listType=\"myOrganization\"\n            tabs={TAB_OPTIONS}\n            currentTab={currentTab}\n            onTabSwitch={onTabSwitch}\n            listHead={TABLE_HEAD_VISIONS_MEMBERS}\n            listData={listDataMembers}\n            daoSubpage={subPage}\n          />\n        )}\n        {subPage === 'organizations' && (\n          <Box>\n            <Box mb=\"2rem\" display=\"flex\" justifyContent=\"flex-end\">\n              {' '}\n              <Button\n                variant=\"contained\"\n                startIcon={<Iconify icon={'eva:plus-fill'} />}\n                onClick={() => {\n                  setIsOpenModal(true);\n                  setModalType('createOrganization');\n                }}\n                style={{ marginRight: '1rem' }}\n              >\n                Create organization\n              </Button>\n            </Box>\n            <DAOLists\n              listType=\"myOrganization\"\n              tabs={TAB_OPTIONS}\n              currentTab={currentTab}\n              onTabSwitch={onTabSwitch}\n              listHead={TABLE_HEAD_MY_ORG}\n              listData={listDataOwnOrganizations}\n              daoSubpage={subPage}\n            />\n          </Box>\n        )}\n        <DialogAnimate open={isOpenModal} onClose={() => setIsOpenModal(false)}>\n          <DialogTitle>\n            {modalType === 'createTask'\n              ? 'Create task'\n              : modalType === 'updateTask'\n              ? 'Update task'\n              : modalType === 'rejectFeedback'\n              ? 'Rejection feedback'\n              : modalType === 'createOrganization'\n              ? 'Create organization'\n              : modalType === 'updateOrganization'\n              ? 'Update organization'\n              : modalType === 'transferOwnershipOrganization'\n              ? 'Transfer ownership of organization'\n              : 'Add task to organization'}\n          </DialogTitle>\n          <Box p=\"1.5rem\">\n            {modalType === 'createTask' && (\n              <CreateTaskForm\n                taskForm={taskFormData || {}}\n                onCancel={() => createTaskCleanup()}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'updateTask' && (\n              <CreateTaskForm\n                taskForm={taskFormData || {}}\n                taskIdForEdit={taskIdInEdit}\n                onCancel={() => updateTaskCleanup()}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'addToOrg' && (\n              <AddTaskToOrganizationForm\n                form={addTaskToOrganizationFormData || {}}\n                onCancel={() => addTaskToOrganizationCleanup()}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'rejectFeedback' && (\n              <RejectTaskForm\n                form={rejectTaskFormData || {}}\n                onCancel={() => rejectTaskCleanup()}\n                taskId={taskIdToReject}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'createOrganization' && (\n              <OrganizationCreateAndUpdateForm\n                form={organizationFormData || {}}\n                onCancel={() => organizationUpdateAndTransferOwnershipCleanup()}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'updateOrganization' && (\n              <OrganizationCreateAndUpdateForm\n                form={organizationFormData || {}}\n                onCancel={() => organizationUpdateAndTransferOwnershipCleanup()}\n                organizationId={organizationIdInUse}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'transferOwnershipOrganization' && (\n              <OrganizationTransferOwnershipForm\n                form={organizationTransferOwnershipFormData || {}}\n                onCancel={() => organizationUpdateAndTransferOwnershipCleanup()}\n                organizationId={organizationIdInUse}\n                actionCb={formActionCb}\n              />\n            )}\n          </Box>\n        </DialogAnimate>\n      </Container>\n    </Page>\n  );\n}\n"],"names":["TABLE_HEAD_MY_ORG","id","label","align","TABLE_HEAD_VISIONS_MEMBERS","TABLE_HEAD_TASKS","defaultTaskFormData","title","specification","budget","deadline","attachments","keywords","defaultAddTaskToOrganizationFormData","organizationId","taskId","defaultRejectTaskFormData","feedback","defaultOrganizationFormData","name","description","vision","defaultOrganizationTransferOwnershipFormData","newOwnerId","TAB_OPTIONS","OrganizationOwn","subPage","themeStretch","useSettings","enqueueSnackbar","useSnackbar","currentTab","useTabs","taskAction","useTasks","selectedOption","setSelectedOption","useState","selectOptions","setSelectOptions","listDataMembers","setListDataMembers","listDataOwnOrganizations","setListDataOwnOrganizations","listDataTasks","setListDataTasks","isOpenModal","setIsOpenModal","modalType","setModalType","taskIdInEdit","setTaskIdInEdit","taskIdToReject","setTaskIdToReject","taskFormData","setTaskFormData","addTaskToOrganizationFormData","rejectTaskFormData","organizationFormData","setOrganizationFormData","organizationTransferOwnershipFormData","organizationIdInUse","setOrganizationIdInUse","selectedKeyring","useUser","getOwnOrganizations","ownOrganizations","getMembersOfAnOrganization","membersOfTheSelectedOrganization","daoAction","getOrganizationTasks","organizationTasks","useDao","useEffect","value","mappedOptions","map","ownOrganization","tableData","owner","expandedContent","createdAt","createdTime","lastUpdatedAt","lastUpdated","daoActions","DaoCallables","cb","member","task","status","TaskCallables","replaceAll","isHidden","TaskStatusEnum","onOptionSelect","event","subpage","target","orgId","find","joinedOrg","onTabSwitch","tab","console","log","organizationUpdateAndTransferOwnershipCleanup","formActionCb","useCallback","palletType","actionType","payload","Pallets","maxWidth","heading","links","href","PATH_UNIVERSALDOT","options","display","alignItems","width","variant","startIcon","icon","onClick","style","marginRight","listType","tabs","listHead","listData","daoSubpage","mb","justifyContent","open","onClose","p","taskForm","onCancel","actionCb","taskIdForEdit","form"],"sourceRoot":""}