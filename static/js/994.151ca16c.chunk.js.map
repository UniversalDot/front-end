{"version":3,"file":"static/js/994.151ca16c.chunk.js","mappings":"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","sources":["pages/OrganizationOwn.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n// @mui\nimport { Container, Box, Button, DialogTitle } from '@mui/material';\n// hooks\nimport useSettings from '../hooks/useSettings';\nimport useTabs from '../hooks/useTabs';\nimport { useUser, useDao, useTasks } from '../hooks/universaldot';\n// routes\nimport { PATH_UNIVERSALDOT } from '../routes/paths';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport Iconify from '../components/Iconify';\nimport { DialogAnimate } from '../components/animate';\n// universaldot\nimport {\n  DAOLists,\n  // DAOAnalytics,\n  Select,\n  // Kanban,\n  CreateTaskForm,\n  AddTaskToOrganizationForm,\n  RejectTaskForm,\n} from '../components/universaldot/DAO';\nimport { DaoCallables, TaskCallables, TaskStatusEnum } from '../types';\nimport { useSnackbar } from 'notistack';\n// ----------------------------------------------------------------------\n\ntype OrganizationOwnProps = {\n  subPage: 'organizations' | 'members' | 'tasks';\n};\n\nconst TABLE_HEAD_MY_ORG = [\n  { id: 'name', label: 'Name', align: 'left' },\n  { id: 'owner', label: 'Owner', align: 'left' },\n  { id: 'actions' },\n  { id: 'expandRow' },\n];\n\nconst TABLE_HEAD_VISIONS_MEMBERS = [\n  { id: 'name', label: 'Name', align: 'left' },\n  { id: 'actions' },\n];\n\nconst TABLE_HEAD_TASKS = [\n  { id: 'name', label: 'Name', align: 'left' },\n  { id: 'specification', label: 'Specification', align: 'left' },\n  { id: 'budget', label: 'Budget', align: 'left' },\n  { id: 'deadline', label: 'Deadline', align: 'left' },\n  { id: 'attachments', label: 'Attachments', align: 'left' },\n  { id: 'keywords', label: 'Keywords', align: 'left' },\n  { id: 'status', label: 'Status', align: 'left' },\n  { id: 'actions' },\n];\n\nconst defaultTaskFormData = {\n  title: '',\n  specification: '',\n  budget: '',\n  deadline: '',\n  attachments: '',\n  keywords: '',\n};\n\nconst defaultAddTaskToOrganizationFormData = {\n  organizationId: '',\n  taskId: '',\n};\n\nconst defaultRejectTaskFormData = {\n  feedback: '',\n};\n\nconst TAB_OPTIONS = ['All'];\n\nexport default function OrganizationOwn({ subPage }: OrganizationOwnProps) {\n  const { themeStretch } = useSettings();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { currentTab } = useTabs('All');\n\n  const { taskAction } = useTasks();\n\n  const [selectedOption, setSelectedOption] = useState('');\n  const [selectOptions, setSelectOptions] = useState([]);\n\n  const [listDataMembers, setListDataMembers] = useState([]);\n  const [listDataOwnOrganizations, setListDataOwnOrganizations] = useState([]);\n  const [listDataTasks, setListDataTasks] = useState([]);\n\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [modalType, setModalType] = useState<\n    'addToOrg' | 'createTask' | 'updateTask' | 'rejectFeedback'\n  >('createTask');\n  const [taskIdInEdit, setTaskIdInEdit] = useState<string>('');\n  const [taskIdToReject, setTaskIdToReject] = useState<string>('');\n\n  const [taskFormData, setTaskFormData] = useState(defaultTaskFormData);\n  const [addTaskToOrganizationFormData] = useState(defaultAddTaskToOrganizationFormData);\n  const [rejectTaskFormData] = useState(defaultRejectTaskFormData);\n\n  const { selectedKeyring } = useUser();\n  const {\n    getOwnOrganizations,\n    ownOrganizations,\n    getMembersOfAnOrganization,\n    membersOfTheSelectedOrganization,\n    daoAction,\n    getOrganizationTasks,\n    organizationTasks,\n  } = useDao();\n\n  useEffect(() => {\n    if (selectedKeyring.value) {\n      getOwnOrganizations(selectedKeyring.value);\n    }\n  }, [selectedKeyring.value, getOwnOrganizations]);\n\n  useEffect(() => {\n    if (ownOrganizations) {\n      const mappedOptions = ownOrganizations.map((ownOrganization: any) => ownOrganization.name);\n      setSelectOptions(mappedOptions);\n\n      const tableData = ownOrganizations.map((ownOrganization: any) => ({\n        id: ownOrganization.id,\n        name: ownOrganization.name,\n        owner: ownOrganization.owner,\n        expandedContent: {\n          organizationId: ownOrganization.id,\n          description: ownOrganization.description,\n          vision: ownOrganization.vision,\n          createdAt: ownOrganization.createdTime,\n          lastUpdatedAt: ownOrganization.lastUpdated,\n          daoActions: [\n            {\n              id: DaoCallables.ADD_MEMBERS,\n              label: 'Add members',\n              cb: () => daoAction(DaoCallables.ADD_MEMBERS, '@TODO payload', enqueueSnackbar),\n            },\n          ],\n        },\n        daoActions: [\n          {\n            id: DaoCallables.DISSOLVE_ORGANIZATION,\n            label: 'Dissolve organization',\n            cb: () =>\n              daoAction(DaoCallables.DISSOLVE_ORGANIZATION, '@TODO payload', enqueueSnackbar),\n          },\n          {\n            id: DaoCallables.UPDATE_ORGANIZATION,\n            label: 'Update organization',\n            cb: () => daoAction(DaoCallables.UPDATE_ORGANIZATION, '@TODO payload', enqueueSnackbar),\n          },\n          {\n            id: DaoCallables.TRANSFER_OWNERSHIP,\n            label: 'Transfer ownership',\n            cb: () => daoAction(DaoCallables.TRANSFER_OWNERSHIP, '@TODO payload', enqueueSnackbar),\n          },\n        ],\n      }));\n      setListDataOwnOrganizations(tableData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ownOrganizations]);\n\n  useEffect(() => {\n    if (membersOfTheSelectedOrganization) {\n      const tableData = membersOfTheSelectedOrganization.map((member: any) => ({\n        name: member.name,\n        daoActions: [\n          {\n            id: DaoCallables.REMOVE_MEMBERS,\n            label: 'Remove member',\n            cb: () => daoAction(DaoCallables.REMOVE_MEMBERS, '@TODO payload', enqueueSnackbar),\n          },\n        ],\n      }));\n      setListDataMembers(tableData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [membersOfTheSelectedOrganization]);\n\n  useEffect(() => {\n    if (organizationTasks) {\n      const tableData = organizationTasks.map((task: any) => ({\n        name: task.title,\n        specification: task.specification,\n        budget: task.budget,\n        deadline: task.deadline,\n        attachments: task.attachments,\n        keywords: task.keywords,\n        status: task.status,\n        daoActions: [\n          {\n            id: DaoCallables.REMOVE_TASKS,\n            label: 'Remove task',\n            cb: () =>\n              daoAction(DaoCallables.REMOVE_TASKS, [task.organizationId, task.id], enqueueSnackbar),\n          },\n          {\n            id: TaskCallables.UPDATE_TASK,\n            label: 'Update task',\n            cb: () => {\n              setIsOpenModal(true);\n              setModalType('updateTask');\n              setTaskIdInEdit(task.id);\n              setTaskFormData({\n                title: task.title,\n                specification: task.specification,\n                budget: task.budget.replaceAll(',', ''),\n                deadline: task.deadline.replaceAll(',', ''),\n                attachments: task.attachments,\n                keywords: task.keywords,\n              });\n            },\n          },\n          {\n            id: TaskCallables.ACCEPT_TASK,\n            label: 'Accept task',\n            cb: () => taskAction(TaskCallables.ACCEPT_TASK, [task.id], enqueueSnackbar),\n            isHidden: task.status !== TaskStatusEnum.COMPLETED ? true : false,\n          },\n          {\n            id: TaskCallables.REJECT_TASK,\n            label: 'Reject task',\n            cb: () => {\n              setIsOpenModal(true);\n              setModalType('rejectFeedback');\n            },\n            isHidden: task.status !== TaskStatusEnum.COMPLETED ? true : false,\n          },\n        ],\n      }));\n\n      setListDataTasks(tableData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [organizationTasks]);\n\n  const onOptionSelect = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    subpage: 'members' | 'tasks'\n  ) => {\n    setSelectedOption(event.target.value);\n\n    const orgId = ownOrganizations.find(\n      (joinedOrg: any) => joinedOrg.name === event.target.value\n    ).id;\n\n    if (orgId) {\n      if (subpage === 'members') {\n        getMembersOfAnOrganization(orgId, DaoCallables.MEMBERS, enqueueSnackbar);\n      }\n\n      if (subpage === 'tasks') {\n        getOrganizationTasks(orgId, DaoCallables.ORGANIZATION_TASKS, enqueueSnackbar);\n      }\n    }\n  };\n\n  const onTabSwitch = (event: React.SyntheticEvent<Element, Event>, tab: string) => {\n    console.log('not needed tab switch');\n    return;\n  };\n\n  const createTaskCleanup = () => {\n    setIsOpenModal(false);\n    setTaskFormData(defaultTaskFormData);\n  };\n\n  const updateTaskCleanup = () => {\n    setIsOpenModal(false);\n    setModalType('createTask');\n    setTaskIdInEdit('');\n    setTaskFormData(defaultTaskFormData);\n  };\n\n  const addTaskToOrganizationCleanup = () => {\n    setIsOpenModal(false);\n  };\n  const rejectTaskCleanup = () => {\n    setIsOpenModal(false);\n    setTaskIdToReject('');\n  };\n\n  return (\n    <Page title=\"My organization\">\n      <Container maxWidth={themeStretch ? false : 'xl'}>\n        <HeaderBreadcrumbs\n          heading=\"DAO\"\n          links={[\n            { name: 'Organization', href: PATH_UNIVERSALDOT.dao.root },\n            { name: 'My organization' },\n            { name: subPage },\n          ]}\n        />\n        {/* <DAOAnalytics /> */}\n        {selectOptions && subPage === 'members' && (\n          <Select\n            options={selectOptions}\n            selectedOption={selectedOption}\n            onOptionSelect={(event) => onOptionSelect(event, 'members')}\n          />\n        )}\n        {selectOptions && subPage === 'tasks' && (\n          <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n            <Select\n              options={selectOptions}\n              selectedOption={selectedOption}\n              onOptionSelect={(event) => onOptionSelect(event, 'tasks')}\n            />\n            <Button\n              variant=\"contained\"\n              startIcon={<Iconify icon={'eva:plus-fill'} />}\n              onClick={() => {\n                setIsOpenModal(true);\n                setModalType('addToOrg');\n              }}\n              style={{ marginRight: '1rem' }}\n            >\n              Add task to organization\n            </Button>\n            <Button\n              variant=\"contained\"\n              startIcon={<Iconify icon={'eva:plus-fill'} />}\n              onClick={() => {\n                setIsOpenModal(true);\n                setModalType('createTask');\n              }}\n            >\n              Create task\n            </Button>\n          </Box>\n        )}\n        {/* {subPage === 'tasks' && <Kanban />} */}\n        {subPage === 'tasks' && (\n          <DAOLists\n            listType=\"myOrganization\"\n            tabs={TAB_OPTIONS}\n            currentTab={currentTab}\n            onTabSwitch={onTabSwitch}\n            listHead={TABLE_HEAD_TASKS}\n            listData={listDataTasks}\n            daoSubpage={subPage}\n          />\n        )}\n        {subPage === 'members' && (\n          <DAOLists\n            listType=\"myOrganization\"\n            tabs={TAB_OPTIONS}\n            currentTab={currentTab}\n            onTabSwitch={onTabSwitch}\n            listHead={TABLE_HEAD_VISIONS_MEMBERS}\n            listData={listDataMembers}\n            daoSubpage={subPage}\n          />\n        )}\n        {subPage === 'organizations' && (\n          <DAOLists\n            listType=\"myOrganization\"\n            tabs={TAB_OPTIONS}\n            currentTab={currentTab}\n            onTabSwitch={onTabSwitch}\n            listHead={TABLE_HEAD_MY_ORG}\n            listData={listDataOwnOrganizations}\n            daoSubpage={subPage}\n          />\n        )}\n        <DialogAnimate open={isOpenModal} onClose={() => setIsOpenModal(false)}>\n          <DialogTitle>\n            {modalType === 'createTask'\n              ? 'Create task'\n              : modalType === 'updateTask'\n              ? 'Update task'\n              : modalType === 'rejectFeedback'\n              ? 'Rejection feedback'\n              : 'Add task to organization'}\n          </DialogTitle>\n          <Box p=\"1.5rem\">\n            {modalType === 'createTask' && (\n              <CreateTaskForm taskForm={taskFormData || {}} onCancel={() => createTaskCleanup()} />\n            )}\n            {modalType === 'updateTask' && (\n              <CreateTaskForm\n                taskForm={taskFormData || {}}\n                taskIdForEdit={taskIdInEdit}\n                onCancel={() => updateTaskCleanup()}\n              />\n            )}\n            {modalType === 'addToOrg' && (\n              <AddTaskToOrganizationForm\n                form={addTaskToOrganizationFormData || {}}\n                onCancel={() => addTaskToOrganizationCleanup()}\n              />\n            )}\n            {modalType === 'rejectFeedback' && (\n              <RejectTaskForm\n                form={rejectTaskFormData || {}}\n                onCancel={() => rejectTaskCleanup()}\n                taskId={taskIdToReject}\n              />\n            )}\n          </Box>\n        </DialogAnimate>\n      </Container>\n    </Page>\n  );\n}\n"],"names":["TABLE_HEAD_MY_ORG","id","label","align","TABLE_HEAD_VISIONS_MEMBERS","TABLE_HEAD_TASKS","defaultTaskFormData","title","specification","budget","deadline","attachments","keywords","defaultAddTaskToOrganizationFormData","organizationId","taskId","defaultRejectTaskFormData","feedback","TAB_OPTIONS","OrganizationOwn","subPage","themeStretch","useSettings","enqueueSnackbar","useSnackbar","currentTab","useTabs","taskAction","useTasks","selectedOption","setSelectedOption","useState","selectOptions","setSelectOptions","listDataMembers","setListDataMembers","listDataOwnOrganizations","setListDataOwnOrganizations","listDataTasks","setListDataTasks","isOpenModal","setIsOpenModal","modalType","setModalType","taskIdInEdit","setTaskIdInEdit","taskIdToReject","setTaskIdToReject","taskFormData","setTaskFormData","addTaskToOrganizationFormData","rejectTaskFormData","selectedKeyring","useUser","getOwnOrganizations","ownOrganizations","getMembersOfAnOrganization","membersOfTheSelectedOrganization","daoAction","getOrganizationTasks","organizationTasks","useDao","useEffect","value","mappedOptions","map","ownOrganization","name","tableData","owner","expandedContent","description","vision","createdAt","createdTime","lastUpdatedAt","lastUpdated","daoActions","DaoCallables","cb","member","task","status","TaskCallables","replaceAll","isHidden","TaskStatusEnum","onOptionSelect","event","subpage","target","orgId","find","joinedOrg","onTabSwitch","tab","console","log","maxWidth","heading","links","href","PATH_UNIVERSALDOT","options","display","alignItems","width","variant","startIcon","icon","onClick","style","marginRight","listType","tabs","listHead","listData","daoSubpage","open","onClose","p","taskForm","onCancel","taskIdForEdit","form"],"sourceRoot":""}