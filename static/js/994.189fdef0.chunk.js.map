{"version":3,"file":"static/js/994.189fdef0.chunk.js","mappings":"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","sources":["pages/OrganizationOwn.tsx"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\n// @mui\nimport { Container, Box, Button, DialogTitle, Stack, LinearProgress } from '@mui/material';\n// hooks\nimport useSettings from '../hooks/useSettings';\nimport useTabs from '../hooks/useTabs';\nimport { useUser, useDao, useTasks, useLoader } from '../hooks/universaldot';\n// routes\nimport { PATH_UNIVERSALDOT } from '../routes/paths';\n// components\nimport Page from '../components/Page';\nimport HeaderBreadcrumbs from '../components/HeaderBreadcrumbs';\nimport Iconify from '../components/Iconify';\nimport { DialogAnimate } from '../components/animate';\n// universaldot\nimport {\n  DAOLists,\n  // DAOAnalytics,\n  Select,\n  // Kanban,\n  CreateUpdateTaskForm,\n  AddTaskToOrganizationForm,\n  RejectTaskForm,\n  OrganizationCreateAndUpdateForm,\n  OrganizationTransferOwnershipForm,\n} from '../components/universaldot/DAO';\nimport { DaoCallables, Pallets, TaskCallables, TaskStatusEnum } from '../types';\nimport { useSnackbar } from 'notistack';\n// ----------------------------------------------------------------------\n\ntype OrganizationOwnProps = {\n  subPage: 'organizations' | 'members' | 'tasks';\n};\n\nconst TABLE_HEAD_MY_ORG = [\n  { id: 'name', label: 'Name', align: 'left' },\n  { id: 'owner', label: 'Owner', align: 'left' },\n  { id: 'actions' },\n  { id: 'expandRow' },\n];\n\nconst TABLE_HEAD_VISIONS_MEMBERS = [\n  { id: 'name', label: 'Name', align: 'left' },\n  { id: 'actions' },\n];\n\nconst TABLE_HEAD_TASKS = [\n  { id: 'name', label: 'Name', align: 'left' },\n  { id: 'specification', label: 'Specification', align: 'left' },\n  { id: 'budget', label: 'Budget', align: 'left' },\n  { id: 'deadline', label: 'Deadline', align: 'left' },\n  { id: 'attachments', label: 'Attachments', align: 'left' },\n  { id: 'keywords', label: 'Keywords', align: 'left' },\n  { id: 'status', label: 'Status', align: 'left' },\n  { id: 'actions' },\n];\n\nconst defaultTaskFormData = {\n  title: '',\n  specification: '',\n  budget: '',\n  deadline: '',\n  attachments: '',\n  keywords: '',\n};\n\nconst defaultAddTaskToOrganizationFormData = {\n  organizationId: '',\n  taskId: '',\n};\n\nconst defaultRejectTaskFormData = {\n  feedback: '',\n};\n\nconst defaultOrganizationFormData = {\n  name: '',\n  description: '',\n  vision: '',\n};\n\nconst defaultOrganizationTransferOwnershipFormData = {\n  newOwnerId: '',\n};\n\nconst TAB_OPTIONS = ['All'];\n\nexport default function OrganizationOwn({ subPage }: OrganizationOwnProps) {\n  const { themeStretch } = useSettings();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { currentTab } = useTabs('All');\n\n  const { taskAction } = useTasks();\n\n  const {\n    loadingDaoAddMembers,\n    loadingDaoRemoveMembers,\n    loadingDaoAddTasks,\n    loadingDaoRemoveTasks,\n    loadingDaoCreateOrganization,\n    loadingDaoDissolveOrganization,\n    loadingDaoUpdateOrganization,\n    loadingDaoTransferOwnership,\n    loadingTasksCreateTask,\n    loadingTasksUpdateTask,\n  } = useLoader();\n\n  const [selectedOption, setSelectedOption] = useState('');\n  const [selectOptions, setSelectOptions] = useState([]);\n\n  const [listDataMembers, setListDataMembers] = useState([]);\n  const [listDataOwnOrganizations, setListDataOwnOrganizations] = useState([]);\n  const [listDataTasks, setListDataTasks] = useState([]);\n\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [modalType, setModalType] = useState<\n    | 'addToOrg'\n    | 'createTask'\n    | 'updateTask'\n    | 'rejectFeedback'\n    | 'createOrganization'\n    | 'updateOrganization'\n    | 'transferOwnershipOrganization'\n  >('createTask');\n  const [taskIdInEdit, setTaskIdInEdit] = useState<string>('');\n  const [taskIdToReject, setTaskIdToReject] = useState<string>('');\n\n  const [taskFormData, setTaskFormData] = useState(defaultTaskFormData);\n  const [addTaskToOrganizationFormData] = useState(defaultAddTaskToOrganizationFormData);\n  const [rejectTaskFormData] = useState(defaultRejectTaskFormData);\n\n  const [organizationFormData, setOrganizationFormData] = useState(defaultOrganizationFormData);\n  const [organizationTransferOwnershipFormData] = useState(\n    defaultOrganizationTransferOwnershipFormData\n  );\n\n  const [organizationIdInUse, setOrganizationIdInUse] = useState<string>('');\n\n  const { selectedKeyring } = useUser();\n  const {\n    getOwnOrganizations,\n    ownOrganizations,\n    getMembersOfAnOrganization,\n    membersOfTheSelectedOrganization,\n    daoAction,\n    getOrganizationTasks,\n    organizationTasks,\n  } = useDao();\n\n  const loadingDAO = useMemo(\n    () =>\n      loadingDaoAddMembers ||\n      loadingDaoRemoveMembers ||\n      loadingDaoAddTasks ||\n      loadingDaoRemoveTasks ||\n      loadingDaoCreateOrganization ||\n      loadingDaoDissolveOrganization ||\n      loadingDaoUpdateOrganization ||\n      loadingDaoTransferOwnership,\n    [\n      loadingDaoAddMembers,\n      loadingDaoRemoveMembers,\n      loadingDaoAddTasks,\n      loadingDaoRemoveTasks,\n      loadingDaoCreateOrganization,\n      loadingDaoDissolveOrganization,\n      loadingDaoUpdateOrganization,\n      loadingDaoTransferOwnership,\n    ]\n  );\n\n  const loadingTaskCreateUpdate = useMemo(\n    () => loadingTasksCreateTask || loadingTasksUpdateTask,\n    [loadingTasksCreateTask, loadingTasksUpdateTask]\n  );\n\n  useEffect(() => {\n    if (selectedKeyring.value) {\n      getOwnOrganizations(selectedKeyring.value);\n    }\n  }, [selectedKeyring.value, getOwnOrganizations]);\n\n  useEffect(\n    () => () => {\n      setSelectedOption('');\n      setListDataMembers([]);\n      setListDataTasks([]);\n    },\n    [subPage]\n  );\n\n  useEffect(() => {\n    if (ownOrganizations) {\n      const mappedOptions = ownOrganizations.map((ownOrganization: any) => ownOrganization.name);\n      setSelectOptions(mappedOptions);\n\n      const tableData = ownOrganizations.map((ownOrganization: any) => ({\n        id: ownOrganization.id,\n        name: ownOrganization.name,\n        owner: ownOrganization.owner,\n        expandedContent: {\n          organizationId: ownOrganization.id,\n          description: ownOrganization.description,\n          vision: ownOrganization.vision,\n          createdAt: ownOrganization.createdTime,\n          lastUpdatedAt: ownOrganization.lastUpdated,\n          daoActions: [\n            {\n              id: DaoCallables.ADD_MEMBERS,\n              label: 'Add members',\n              cb: () => daoAction(DaoCallables.ADD_MEMBERS, '@TODO payload', enqueueSnackbar),\n            },\n          ],\n        },\n        daoActions: [\n          {\n            id: DaoCallables.DISSOLVE_ORGANIZATION,\n            label: 'Dissolve organization',\n            cb: () =>\n              daoAction(DaoCallables.DISSOLVE_ORGANIZATION, ownOrganization.id, enqueueSnackbar),\n          },\n          {\n            id: DaoCallables.UPDATE_ORGANIZATION,\n            label: 'Update organization',\n            cb: () => {\n              setIsOpenModal(true);\n              setModalType('updateOrganization');\n              setOrganizationIdInUse(ownOrganization.id);\n              setOrganizationFormData({\n                name: ownOrganization.name,\n                description: ownOrganization.description,\n                vision: ownOrganization.vision,\n              });\n            },\n          },\n          {\n            id: DaoCallables.TRANSFER_OWNERSHIP,\n            label: 'Transfer ownership',\n            cb: () => {\n              setIsOpenModal(true);\n              setOrganizationIdInUse(ownOrganization.id);\n              setModalType('transferOwnershipOrganization');\n            },\n          },\n        ],\n      }));\n      setListDataOwnOrganizations(tableData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ownOrganizations]);\n\n  useEffect(() => {\n    if (membersOfTheSelectedOrganization && organizationIdInUse) {\n      const tableData = membersOfTheSelectedOrganization.map((member: any) => ({\n        name: member.name,\n        daoActions: [\n          {\n            id: DaoCallables.REMOVE_MEMBERS,\n            label: 'Remove member',\n            cb: () =>\n              daoAction(\n                DaoCallables.REMOVE_MEMBERS,\n                [organizationIdInUse, member.owner],\n                enqueueSnackbar\n              ),\n          },\n        ],\n      }));\n      setListDataMembers(tableData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [membersOfTheSelectedOrganization, organizationIdInUse]);\n\n  useEffect(() => {\n    if (organizationTasks) {\n      const tableData = organizationTasks.map((task: any) => ({\n        name: task.title,\n        specification: task.specification,\n        budget: task.budget,\n        deadline: task.deadline,\n        attachments: task.attachments,\n        keywords: task.keywords,\n        status: task.status,\n        daoActions: [\n          {\n            id: DaoCallables.REMOVE_TASKS,\n            label: 'Remove task',\n            cb: () =>\n              daoAction(DaoCallables.REMOVE_TASKS, [task.organizationId, task.id], enqueueSnackbar),\n          },\n          {\n            id: TaskCallables.UPDATE_TASK,\n            label: 'Update task',\n            cb: () => {\n              setIsOpenModal(true);\n              setModalType('updateTask');\n              setTaskIdInEdit(task.id);\n              setTaskFormData({\n                title: task.title,\n                specification: task.specification,\n                budget: task.budget.replaceAll(',', ''),\n                deadline: task.deadline.replaceAll(',', ''),\n                attachments: task.attachments,\n                keywords: task.keywords,\n              });\n            },\n          },\n          {\n            id: TaskCallables.ACCEPT_TASK,\n            label: 'Accept task',\n            cb: () => taskAction(TaskCallables.ACCEPT_TASK, [task.id], enqueueSnackbar),\n            isHidden: task.status !== TaskStatusEnum.COMPLETED ? true : false,\n          },\n          {\n            id: TaskCallables.REJECT_TASK,\n            label: 'Reject task',\n            cb: () => {\n              setIsOpenModal(true);\n              setModalType('rejectFeedback');\n            },\n            isHidden: task.status !== TaskStatusEnum.COMPLETED ? true : false,\n          },\n        ],\n      }));\n\n      setListDataTasks(tableData);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [organizationTasks]);\n\n  const onOptionSelect = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    subpage: 'members' | 'tasks'\n  ) => {\n    setSelectedOption(event.target.value);\n\n    const orgId = ownOrganizations.find(\n      (joinedOrg: any) => joinedOrg.name === event.target.value\n    ).id;\n\n    setOrganizationIdInUse(orgId);\n\n    if (orgId) {\n      if (subpage === 'members') {\n        getMembersOfAnOrganization(orgId, DaoCallables.MEMBERS, enqueueSnackbar);\n      }\n\n      if (subpage === 'tasks') {\n        getOrganizationTasks(orgId, DaoCallables.ORGANIZATION_TASKS, enqueueSnackbar);\n      }\n    }\n  };\n\n  const onTabSwitch = (event: React.SyntheticEvent<Element, Event>, tab: string) => {\n    console.log('not needed tab switch');\n    return;\n  };\n\n  const createTaskCleanup = () => {\n    setIsOpenModal(false);\n    setTaskFormData(defaultTaskFormData);\n  };\n\n  const updateTaskCleanup = () => {\n    setIsOpenModal(false);\n    setModalType('createTask');\n    setTaskIdInEdit('');\n    setTaskFormData(defaultTaskFormData);\n  };\n\n  const addTaskToOrganizationCleanup = () => {\n    setIsOpenModal(false);\n  };\n  const rejectTaskCleanup = () => {\n    setIsOpenModal(false);\n    setTaskIdToReject('');\n  };\n  const organizationUpdateAndTransferOwnershipCleanup = () => {\n    setIsOpenModal(false);\n    setOrganizationIdInUse('');\n  };\n\n  const formActionCb = useCallback(\n    (palletType: Pallets, actionType: DaoCallables | TaskCallables, payload: any) => {\n      if (palletType === Pallets.DAO) {\n        daoAction(actionType, payload, enqueueSnackbar);\n      }\n\n      if (palletType === Pallets.TASK) {\n        taskAction(actionType, payload, enqueueSnackbar);\n      }\n    },\n    []\n  );\n\n  return (\n    <Page title=\"My organization\">\n      <Container maxWidth={themeStretch ? false : 'xl'}>\n        <HeaderBreadcrumbs\n          heading=\"DAO\"\n          links={[\n            { name: 'Organization', href: PATH_UNIVERSALDOT.dao.root },\n            { name: 'My organization' },\n            { name: subPage },\n          ]}\n        />\n        {/* <DAOAnalytics /> */}\n        {/* {loadingDAO && (\n          <Stack sx={{ width: '100%', color: 'grey.500' }} spacing={2}>\n            <LinearProgress />\n          </Stack>\n        )} */}\n        {selectOptions && subPage === 'members' && (\n          <Select\n            options={selectOptions}\n            selectedOption={selectedOption}\n            onOptionSelect={(event) => onOptionSelect(event, 'members')}\n          />\n        )}\n        {selectOptions && subPage === 'tasks' && (\n          <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n            <Select\n              options={selectOptions}\n              selectedOption={selectedOption}\n              onOptionSelect={(event) => onOptionSelect(event, 'tasks')}\n            />\n            <Button\n              variant=\"contained\"\n              startIcon={<Iconify icon={'eva:plus-fill'} />}\n              onClick={() => {\n                setIsOpenModal(true);\n                setModalType('addToOrg');\n              }}\n              style={{ marginRight: '1rem' }}\n            >\n              Add task to organization\n            </Button>\n            <Button\n              variant=\"contained\"\n              startIcon={<Iconify icon={'eva:plus-fill'} />}\n              onClick={() => {\n                setIsOpenModal(true);\n                setModalType('createTask');\n              }}\n            >\n              Create task\n            </Button>\n          </Box>\n        )}\n        {/* {subPage === 'tasks' && <Kanban />} */}\n        {subPage === 'tasks' && (\n          <DAOLists\n            listType=\"myOrganization\"\n            tabs={TAB_OPTIONS}\n            currentTab={currentTab}\n            onTabSwitch={onTabSwitch}\n            listHead={TABLE_HEAD_TASKS}\n            listData={listDataTasks}\n            daoSubpage={subPage}\n            loading={loadingDAO || loadingTaskCreateUpdate}\n          />\n        )}\n        {subPage === 'members' && (\n          <DAOLists\n            listType=\"myOrganization\"\n            tabs={TAB_OPTIONS}\n            currentTab={currentTab}\n            onTabSwitch={onTabSwitch}\n            listHead={TABLE_HEAD_VISIONS_MEMBERS}\n            listData={listDataMembers}\n            daoSubpage={subPage}\n            loading={loadingDAO}\n          />\n        )}\n        {subPage === 'organizations' && (\n          <Box>\n            <Box mb=\"2rem\" display=\"flex\" justifyContent=\"flex-end\">\n              {' '}\n              <Button\n                variant=\"contained\"\n                startIcon={<Iconify icon={'eva:plus-fill'} />}\n                onClick={() => {\n                  setIsOpenModal(true);\n                  setModalType('createOrganization');\n                }}\n                style={{ marginRight: '1rem' }}\n              >\n                Create organization\n              </Button>\n            </Box>\n            <DAOLists\n              listType=\"myOrganization\"\n              tabs={TAB_OPTIONS}\n              currentTab={currentTab}\n              onTabSwitch={onTabSwitch}\n              listHead={TABLE_HEAD_MY_ORG}\n              listData={listDataOwnOrganizations}\n              daoSubpage={subPage}\n              loading={loadingDAO}\n            />\n          </Box>\n        )}\n        <DialogAnimate open={isOpenModal} onClose={() => setIsOpenModal(false)}>\n          <DialogTitle>\n            {modalType === 'createTask'\n              ? 'Create task'\n              : modalType === 'updateTask'\n              ? 'Update task'\n              : modalType === 'rejectFeedback'\n              ? 'Rejection feedback'\n              : modalType === 'createOrganization'\n              ? 'Create organization'\n              : modalType === 'updateOrganization'\n              ? 'Update organization'\n              : modalType === 'transferOwnershipOrganization'\n              ? 'Transfer ownership of organization'\n              : 'Add task to organization'}\n          </DialogTitle>\n          <Box p=\"1.5rem\">\n            {modalType === 'createTask' && (\n              <CreateUpdateTaskForm\n                taskForm={taskFormData || {}}\n                onCancel={() => createTaskCleanup()}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'updateTask' && (\n              <CreateUpdateTaskForm\n                taskForm={taskFormData || {}}\n                taskIdForEdit={taskIdInEdit}\n                onCancel={() => updateTaskCleanup()}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'addToOrg' && (\n              <AddTaskToOrganizationForm\n                form={addTaskToOrganizationFormData || {}}\n                onCancel={() => addTaskToOrganizationCleanup()}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'rejectFeedback' && (\n              <RejectTaskForm\n                form={rejectTaskFormData || {}}\n                onCancel={() => rejectTaskCleanup()}\n                taskId={taskIdToReject}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'createOrganization' && (\n              <OrganizationCreateAndUpdateForm\n                form={organizationFormData || {}}\n                onCancel={() => organizationUpdateAndTransferOwnershipCleanup()}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'updateOrganization' && (\n              <OrganizationCreateAndUpdateForm\n                form={organizationFormData || {}}\n                onCancel={() => organizationUpdateAndTransferOwnershipCleanup()}\n                organizationId={organizationIdInUse}\n                actionCb={formActionCb}\n              />\n            )}\n            {modalType === 'transferOwnershipOrganization' && (\n              <OrganizationTransferOwnershipForm\n                form={organizationTransferOwnershipFormData || {}}\n                onCancel={() => organizationUpdateAndTransferOwnershipCleanup()}\n                organizationId={organizationIdInUse}\n                actionCb={formActionCb}\n              />\n            )}\n          </Box>\n        </DialogAnimate>\n      </Container>\n    </Page>\n  );\n}\n"],"names":["TABLE_HEAD_MY_ORG","id","label","align","TABLE_HEAD_VISIONS_MEMBERS","TABLE_HEAD_TASKS","defaultTaskFormData","title","specification","budget","deadline","attachments","keywords","defaultAddTaskToOrganizationFormData","organizationId","taskId","defaultRejectTaskFormData","feedback","defaultOrganizationFormData","name","description","vision","defaultOrganizationTransferOwnershipFormData","newOwnerId","TAB_OPTIONS","OrganizationOwn","subPage","themeStretch","useSettings","enqueueSnackbar","useSnackbar","currentTab","useTabs","taskAction","useTasks","loadingDaoAddMembers","loadingDaoRemoveMembers","loadingDaoAddTasks","loadingDaoRemoveTasks","loadingDaoCreateOrganization","loadingDaoDissolveOrganization","loadingDaoUpdateOrganization","loadingDaoTransferOwnership","loadingTasksCreateTask","loadingTasksUpdateTask","useLoader","selectedOption","setSelectedOption","useState","selectOptions","setSelectOptions","listDataMembers","setListDataMembers","listDataOwnOrganizations","setListDataOwnOrganizations","listDataTasks","setListDataTasks","isOpenModal","setIsOpenModal","modalType","setModalType","taskIdInEdit","setTaskIdInEdit","taskIdToReject","setTaskIdToReject","taskFormData","setTaskFormData","addTaskToOrganizationFormData","rejectTaskFormData","organizationFormData","setOrganizationFormData","organizationTransferOwnershipFormData","organizationIdInUse","setOrganizationIdInUse","selectedKeyring","useUser","getOwnOrganizations","ownOrganizations","getMembersOfAnOrganization","membersOfTheSelectedOrganization","daoAction","getOrganizationTasks","organizationTasks","useDao","loadingDAO","useMemo","loadingTaskCreateUpdate","useEffect","value","mappedOptions","map","ownOrganization","tableData","owner","expandedContent","createdAt","createdTime","lastUpdatedAt","lastUpdated","daoActions","DaoCallables","cb","member","task","status","TaskCallables","replaceAll","isHidden","TaskStatusEnum","onOptionSelect","event","subpage","target","orgId","find","joinedOrg","onTabSwitch","tab","console","log","organizationUpdateAndTransferOwnershipCleanup","formActionCb","useCallback","palletType","actionType","payload","Pallets","maxWidth","heading","links","href","PATH_UNIVERSALDOT","options","display","alignItems","width","variant","startIcon","icon","onClick","style","marginRight","listType","tabs","listHead","listData","daoSubpage","loading","mb","justifyContent","open","onClose","p","taskForm","onCancel","actionCb","taskIdForEdit","form"],"sourceRoot":""}